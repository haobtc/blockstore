#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Network:
  BITCOIN = 1
  LITECOIN = 2
  DOGECOIN = 3
  DARKCOIN = 4

  _VALUES_TO_NAMES = {
    1: "BITCOIN",
    2: "LITECOIN",
    3: "DOGECOIN",
    4: "DARKCOIN",
  }

  _NAMES_TO_VALUES = {
    "BITCOIN": 1,
    "LITECOIN": 2,
    "DOGECOIN": 3,
    "DARKCOIN": 4,
  }

class InvType:
  TX = 1
  BLOCK = 2

  _VALUES_TO_NAMES = {
    1: "TX",
    2: "BLOCK",
  }

  _NAMES_TO_VALUES = {
    "TX": 1,
    "BLOCK": 2,
  }


class AppException(TException):
  """
  Attributes:
   - code
   - message
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'code', None, None, ), # 1
    (2, TType.STRING, 'message', None, "", ), # 2
  )

  def __init__(self, code=None, message=thrift_spec[2][4],):
    self.code = code
    self.message = message

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.code = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.message = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AppException')
    if self.code is not None:
      oprot.writeFieldBegin('code', TType.STRING, 1)
      oprot.writeString(self.code)
      oprot.writeFieldEnd()
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 2)
      oprot.writeString(self.message)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Verification:
  """
  Attributes:
   - verified
   - message
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'verified', None, None, ), # 1
    (2, TType.STRING, 'message', None, None, ), # 2
  )

  def __init__(self, verified=None, message=None,):
    self.verified = verified
    self.message = message

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.verified = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.message = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Verification')
    if self.verified is not None:
      oprot.writeFieldBegin('verified', TType.BOOL, 1)
      oprot.writeBool(self.verified)
      oprot.writeFieldEnd()
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 2)
      oprot.writeString(self.message)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Block:
  """
  Attributes:
   - blockHash
   - version
   - prevHash
   - merkleRoot
   - isMain
   - nextHash
   - cntTxes
   - height
   - timestamp
   - objId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'blockHash', None, None, ), # 1
    (2, TType.I32, 'version', None, None, ), # 2
    (3, TType.STRING, 'prevHash', None, None, ), # 3
    (4, TType.STRING, 'merkleRoot', None, None, ), # 4
    (5, TType.BOOL, 'isMain', None, None, ), # 5
    (6, TType.STRING, 'nextHash', None, None, ), # 6
    (7, TType.I32, 'cntTxes', None, None, ), # 7
    (8, TType.I32, 'height', None, None, ), # 8
    (9, TType.I64, 'timestamp', None, None, ), # 9
    (10, TType.STRING, 'objId', None, None, ), # 10
  )

  def __init__(self, blockHash=None, version=None, prevHash=None, merkleRoot=None, isMain=None, nextHash=None, cntTxes=None, height=None, timestamp=None, objId=None,):
    self.blockHash = blockHash
    self.version = version
    self.prevHash = prevHash
    self.merkleRoot = merkleRoot
    self.isMain = isMain
    self.nextHash = nextHash
    self.cntTxes = cntTxes
    self.height = height
    self.timestamp = timestamp
    self.objId = objId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.blockHash = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.version = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.prevHash = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.merkleRoot = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.isMain = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.nextHash = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.cntTxes = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.height = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.timestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.objId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Block')
    if self.blockHash is not None:
      oprot.writeFieldBegin('blockHash', TType.STRING, 1)
      oprot.writeString(self.blockHash)
      oprot.writeFieldEnd()
    if self.version is not None:
      oprot.writeFieldBegin('version', TType.I32, 2)
      oprot.writeI32(self.version)
      oprot.writeFieldEnd()
    if self.prevHash is not None:
      oprot.writeFieldBegin('prevHash', TType.STRING, 3)
      oprot.writeString(self.prevHash)
      oprot.writeFieldEnd()
    if self.merkleRoot is not None:
      oprot.writeFieldBegin('merkleRoot', TType.STRING, 4)
      oprot.writeString(self.merkleRoot)
      oprot.writeFieldEnd()
    if self.isMain is not None:
      oprot.writeFieldBegin('isMain', TType.BOOL, 5)
      oprot.writeBool(self.isMain)
      oprot.writeFieldEnd()
    if self.nextHash is not None:
      oprot.writeFieldBegin('nextHash', TType.STRING, 6)
      oprot.writeString(self.nextHash)
      oprot.writeFieldEnd()
    if self.cntTxes is not None:
      oprot.writeFieldBegin('cntTxes', TType.I32, 7)
      oprot.writeI32(self.cntTxes)
      oprot.writeFieldEnd()
    if self.height is not None:
      oprot.writeFieldBegin('height', TType.I32, 8)
      oprot.writeI32(self.height)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I64, 9)
      oprot.writeI64(self.timestamp)
      oprot.writeFieldEnd()
    if self.objId is not None:
      oprot.writeFieldBegin('objId', TType.STRING, 10)
      oprot.writeString(self.objId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TxInput:
  """
  Attributes:
   - txid
   - vout
   - script
   - address
   - amountSatoshi
   - q
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'txid', None, None, ), # 1
    (2, TType.I32, 'vout', None, None, ), # 2
    (3, TType.STRING, 'script', None, None, ), # 3
    (4, TType.STRING, 'address', None, None, ), # 4
    (5, TType.STRING, 'amountSatoshi', None, None, ), # 5
    (6, TType.I64, 'q', None, None, ), # 6
  )

  def __init__(self, txid=None, vout=None, script=None, address=None, amountSatoshi=None, q=None,):
    self.txid = txid
    self.vout = vout
    self.script = script
    self.address = address
    self.amountSatoshi = amountSatoshi
    self.q = q

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.txid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.vout = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.script = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.address = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.amountSatoshi = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.q = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TxInput')
    if self.txid is not None:
      oprot.writeFieldBegin('txid', TType.STRING, 1)
      oprot.writeString(self.txid)
      oprot.writeFieldEnd()
    if self.vout is not None:
      oprot.writeFieldBegin('vout', TType.I32, 2)
      oprot.writeI32(self.vout)
      oprot.writeFieldEnd()
    if self.script is not None:
      oprot.writeFieldBegin('script', TType.STRING, 3)
      oprot.writeString(self.script)
      oprot.writeFieldEnd()
    if self.address is not None:
      oprot.writeFieldBegin('address', TType.STRING, 4)
      oprot.writeString(self.address)
      oprot.writeFieldEnd()
    if self.amountSatoshi is not None:
      oprot.writeFieldBegin('amountSatoshi', TType.STRING, 5)
      oprot.writeString(self.amountSatoshi)
      oprot.writeFieldEnd()
    if self.q is not None:
      oprot.writeFieldBegin('q', TType.I64, 6)
      oprot.writeI64(self.q)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TxOutput:
  """
  Attributes:
   - address
   - amountSatoshi
   - script
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'address', None, None, ), # 1
    (2, TType.STRING, 'amountSatoshi', None, None, ), # 2
    (3, TType.STRING, 'script', None, None, ), # 3
  )

  def __init__(self, address=None, amountSatoshi=None, script=None,):
    self.address = address
    self.amountSatoshi = amountSatoshi
    self.script = script

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.address = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.amountSatoshi = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.script = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TxOutput')
    if self.address is not None:
      oprot.writeFieldBegin('address', TType.STRING, 1)
      oprot.writeString(self.address)
      oprot.writeFieldEnd()
    if self.amountSatoshi is not None:
      oprot.writeFieldBegin('amountSatoshi', TType.STRING, 2)
      oprot.writeString(self.amountSatoshi)
      oprot.writeFieldEnd()
    if self.script is not None:
      oprot.writeFieldBegin('script', TType.STRING, 3)
      oprot.writeString(self.script)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Tx:
  """
  Attributes:
   - txid
   - blockHash
   - blockIndex
   - objId
   - inputs
   - outputs
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'txid', None, None, ), # 1
    (2, TType.STRING, 'blockHash', None, None, ), # 2
    (3, TType.STRING, 'blockIndex', None, None, ), # 3
    (4, TType.STRING, 'objId', None, None, ), # 4
    (5, TType.LIST, 'inputs', (TType.STRUCT,(TxInput, TxInput.thrift_spec)), [
    ], ), # 5
    (6, TType.LIST, 'outputs', (TType.STRUCT,(TxOutput, TxOutput.thrift_spec)), [
    ], ), # 6
  )

  def __init__(self, txid=None, blockHash=None, blockIndex=None, objId=None, inputs=thrift_spec[5][4], outputs=thrift_spec[6][4],):
    self.txid = txid
    self.blockHash = blockHash
    self.blockIndex = blockIndex
    self.objId = objId
    if inputs is self.thrift_spec[5][4]:
      inputs = [
    ]
    self.inputs = inputs
    if outputs is self.thrift_spec[6][4]:
      outputs = [
    ]
    self.outputs = outputs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.txid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.blockHash = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.blockIndex = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.objId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.inputs = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = TxInput()
            _elem5.read(iprot)
            self.inputs.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.outputs = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = TxOutput()
            _elem11.read(iprot)
            self.outputs.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Tx')
    if self.txid is not None:
      oprot.writeFieldBegin('txid', TType.STRING, 1)
      oprot.writeString(self.txid)
      oprot.writeFieldEnd()
    if self.blockHash is not None:
      oprot.writeFieldBegin('blockHash', TType.STRING, 2)
      oprot.writeString(self.blockHash)
      oprot.writeFieldEnd()
    if self.blockIndex is not None:
      oprot.writeFieldBegin('blockIndex', TType.STRING, 3)
      oprot.writeString(self.blockIndex)
      oprot.writeFieldEnd()
    if self.objId is not None:
      oprot.writeFieldBegin('objId', TType.STRING, 4)
      oprot.writeString(self.objId)
      oprot.writeFieldEnd()
    if self.inputs is not None:
      oprot.writeFieldBegin('inputs', TType.LIST, 5)
      oprot.writeListBegin(TType.STRUCT, len(self.inputs))
      for iter12 in self.inputs:
        iter12.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.outputs is not None:
      oprot.writeFieldBegin('outputs', TType.LIST, 6)
      oprot.writeListBegin(TType.STRUCT, len(self.outputs))
      for iter13 in self.outputs:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TxVerification:
  """
  Attributes:
   - verified
   - message
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'verified', None, None, ), # 1
    (2, TType.STRING, 'message', None, None, ), # 2
  )

  def __init__(self, verified=None, message=None,):
    self.verified = verified
    self.message = message

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.verified = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.message = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TxVerification')
    if self.verified is not None:
      oprot.writeFieldBegin('verified', TType.BOOL, 1)
      oprot.writeBool(self.verified)
      oprot.writeFieldEnd()
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 2)
      oprot.writeString(self.message)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UTXO:
  """
  Attributes:
   - address
   - amountSatoshi
   - txid
   - vout
   - confirmations
   - scriptPubKey
   - timestamp
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'address', None, None, ), # 1
    (2, TType.STRING, 'amountSatoshi', None, None, ), # 2
    (3, TType.STRING, 'txid', None, None, ), # 3
    (4, TType.I32, 'vout', None, None, ), # 4
    (5, TType.I32, 'confirmations', None, None, ), # 5
    (6, TType.STRING, 'scriptPubKey', None, None, ), # 6
    (7, TType.I64, 'timestamp', None, None, ), # 7
  )

  def __init__(self, address=None, amountSatoshi=None, txid=None, vout=None, confirmations=None, scriptPubKey=None, timestamp=None,):
    self.address = address
    self.amountSatoshi = amountSatoshi
    self.txid = txid
    self.vout = vout
    self.confirmations = confirmations
    self.scriptPubKey = scriptPubKey
    self.timestamp = timestamp

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.address = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.amountSatoshi = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.txid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.vout = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.confirmations = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.scriptPubKey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.timestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UTXO')
    if self.address is not None:
      oprot.writeFieldBegin('address', TType.STRING, 1)
      oprot.writeString(self.address)
      oprot.writeFieldEnd()
    if self.amountSatoshi is not None:
      oprot.writeFieldBegin('amountSatoshi', TType.STRING, 2)
      oprot.writeString(self.amountSatoshi)
      oprot.writeFieldEnd()
    if self.txid is not None:
      oprot.writeFieldBegin('txid', TType.STRING, 3)
      oprot.writeString(self.txid)
      oprot.writeFieldEnd()
    if self.vout is not None:
      oprot.writeFieldBegin('vout', TType.I32, 4)
      oprot.writeI32(self.vout)
      oprot.writeFieldEnd()
    if self.confirmations is not None:
      oprot.writeFieldBegin('confirmations', TType.I32, 5)
      oprot.writeI32(self.confirmations)
      oprot.writeFieldEnd()
    if self.scriptPubKey is not None:
      oprot.writeFieldBegin('scriptPubKey', TType.STRING, 6)
      oprot.writeString(self.scriptPubKey)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I64, 7)
      oprot.writeI64(self.timestamp)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SendTx:
  """
  Attributes:
   - txid
   - raw
   - remoteAddress
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'txid', None, None, ), # 1
    (2, TType.STRING, 'raw', None, None, ), # 2
    None, # 3
    (4, TType.STRING, 'remoteAddress', None, None, ), # 4
  )

  def __init__(self, txid=None, raw=None, remoteAddress=None,):
    self.txid = txid
    self.raw = raw
    self.remoteAddress = remoteAddress

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.txid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.raw = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.remoteAddress = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SendTx')
    if self.txid is not None:
      oprot.writeFieldBegin('txid', TType.STRING, 1)
      oprot.writeString(self.txid)
      oprot.writeFieldEnd()
    if self.raw is not None:
      oprot.writeFieldBegin('raw', TType.STRING, 2)
      oprot.writeString(self.raw)
      oprot.writeFieldEnd()
    if self.remoteAddress is not None:
      oprot.writeFieldBegin('remoteAddress', TType.STRING, 4)
      oprot.writeString(self.remoteAddress)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Inventory:
  """
  Attributes:
   - type
   - hash
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type', None, None, ), # 1
    (2, TType.STRING, 'hash', None, None, ), # 2
  )

  def __init__(self, type=None, hash=None,):
    self.type = type
    self.hash = hash

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.hash = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Inventory')
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 1)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.hash is not None:
      oprot.writeFieldBegin('hash', TType.STRING, 2)
      oprot.writeString(self.hash)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
