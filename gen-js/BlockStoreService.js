//
// Autogenerated by Thrift Compiler (0.9.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

blockstore.BlockStoreService_getBlock_args = function(args) {
  this.network = null;
  this.blockhash = null;
  if (args) {
    if (args.network !== undefined) {
      this.network = args.network;
    }
    if (args.blockhash !== undefined) {
      this.blockhash = args.blockhash;
    }
  }
};
blockstore.BlockStoreService_getBlock_args.prototype = {};
blockstore.BlockStoreService_getBlock_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.network = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.blockhash = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_getBlock_args.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_getBlock_args');
  if (this.network !== null && this.network !== undefined) {
    output.writeFieldBegin('network', Thrift.Type.I32, 1);
    output.writeI32(this.network);
    output.writeFieldEnd();
  }
  if (this.blockhash !== null && this.blockhash !== undefined) {
    output.writeFieldBegin('blockhash', Thrift.Type.STRING, 2);
    output.writeString(this.blockhash);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_getBlock_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof blockstore.AppException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
blockstore.BlockStoreService_getBlock_result.prototype = {};
blockstore.BlockStoreService_getBlock_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new blockstore.Block();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new blockstore.AppException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_getBlock_result.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_getBlock_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_getTipBlock_args = function(args) {
  this.network = null;
  if (args) {
    if (args.network !== undefined) {
      this.network = args.network;
    }
  }
};
blockstore.BlockStoreService_getTipBlock_args.prototype = {};
blockstore.BlockStoreService_getTipBlock_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.network = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_getTipBlock_args.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_getTipBlock_args');
  if (this.network !== null && this.network !== undefined) {
    output.writeFieldBegin('network', Thrift.Type.I32, 1);
    output.writeI32(this.network);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_getTipBlock_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof blockstore.AppException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
blockstore.BlockStoreService_getTipBlock_result.prototype = {};
blockstore.BlockStoreService_getTipBlock_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new blockstore.Block();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new blockstore.AppException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_getTipBlock_result.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_getTipBlock_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_verifyBlock_args = function(args) {
  this.network = null;
  this.block = null;
  if (args) {
    if (args.network !== undefined) {
      this.network = args.network;
    }
    if (args.block !== undefined) {
      this.block = args.block;
    }
  }
};
blockstore.BlockStoreService_verifyBlock_args.prototype = {};
blockstore.BlockStoreService_verifyBlock_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.network = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.block = new blockstore.Block();
        this.block.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_verifyBlock_args.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_verifyBlock_args');
  if (this.network !== null && this.network !== undefined) {
    output.writeFieldBegin('network', Thrift.Type.I32, 1);
    output.writeI32(this.network);
    output.writeFieldEnd();
  }
  if (this.block !== null && this.block !== undefined) {
    output.writeFieldBegin('block', Thrift.Type.STRUCT, 2);
    this.block.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_verifyBlock_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
blockstore.BlockStoreService_verifyBlock_result.prototype = {};
blockstore.BlockStoreService_verifyBlock_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new blockstore.Verification();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_verifyBlock_result.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_verifyBlock_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_addBlock_args = function(args) {
  this.network = null;
  this.block = null;
  if (args) {
    if (args.network !== undefined) {
      this.network = args.network;
    }
    if (args.block !== undefined) {
      this.block = args.block;
    }
  }
};
blockstore.BlockStoreService_addBlock_args.prototype = {};
blockstore.BlockStoreService_addBlock_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.network = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.block = new blockstore.Block();
        this.block.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_addBlock_args.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_addBlock_args');
  if (this.network !== null && this.network !== undefined) {
    output.writeFieldBegin('network', Thrift.Type.I32, 1);
    output.writeI32(this.network);
    output.writeFieldEnd();
  }
  if (this.block !== null && this.block !== undefined) {
    output.writeFieldBegin('block', Thrift.Type.STRUCT, 2);
    this.block.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_addBlock_result = function(args) {
  this.e = null;
  if (args instanceof blockstore.AppException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
blockstore.BlockStoreService_addBlock_result.prototype = {};
blockstore.BlockStoreService_addBlock_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new blockstore.AppException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_addBlock_result.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_addBlock_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_getTx_args = function(args) {
  this.network = null;
  this.txid = null;
  if (args) {
    if (args.network !== undefined) {
      this.network = args.network;
    }
    if (args.txid !== undefined) {
      this.txid = args.txid;
    }
  }
};
blockstore.BlockStoreService_getTx_args.prototype = {};
blockstore.BlockStoreService_getTx_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.network = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.txid = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_getTx_args.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_getTx_args');
  if (this.network !== null && this.network !== undefined) {
    output.writeFieldBegin('network', Thrift.Type.I32, 1);
    output.writeI32(this.network);
    output.writeFieldEnd();
  }
  if (this.txid !== null && this.txid !== undefined) {
    output.writeFieldBegin('txid', Thrift.Type.STRING, 2);
    output.writeString(this.txid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_getTx_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof blockstore.AppException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
blockstore.BlockStoreService_getTx_result.prototype = {};
blockstore.BlockStoreService_getTx_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new blockstore.Tx();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new blockstore.AppException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_getTx_result.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_getTx_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_getTxList_args = function(args) {
  this.network = null;
  this.txids = null;
  if (args) {
    if (args.network !== undefined) {
      this.network = args.network;
    }
    if (args.txids !== undefined) {
      this.txids = args.txids;
    }
  }
};
blockstore.BlockStoreService_getTxList_args.prototype = {};
blockstore.BlockStoreService_getTxList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.network = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.txids = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = input.readString().value;
          this.txids.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_getTxList_args.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_getTxList_args');
  if (this.network !== null && this.network !== undefined) {
    output.writeFieldBegin('network', Thrift.Type.I32, 1);
    output.writeI32(this.network);
    output.writeFieldEnd();
  }
  if (this.txids !== null && this.txids !== undefined) {
    output.writeFieldBegin('txids', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.txids.length);
    for (var iter23 in this.txids)
    {
      if (this.txids.hasOwnProperty(iter23))
      {
        iter23 = this.txids[iter23];
        output.writeString(iter23);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_getTxList_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
blockstore.BlockStoreService_getTxList_result.prototype = {};
blockstore.BlockStoreService_getTxList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.success = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = new blockstore.Tx();
          elem30.read(input);
          this.success.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_getTxList_result.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_getTxList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter31 in this.success)
    {
      if (this.success.hasOwnProperty(iter31))
      {
        iter31 = this.success[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_getMissingTxIdList_args = function(args) {
  this.network = null;
  this.txids = null;
  if (args) {
    if (args.network !== undefined) {
      this.network = args.network;
    }
    if (args.txids !== undefined) {
      this.txids = args.txids;
    }
  }
};
blockstore.BlockStoreService_getMissingTxIdList_args.prototype = {};
blockstore.BlockStoreService_getMissingTxIdList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.network = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.txids = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = input.readString().value;
          this.txids.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_getMissingTxIdList_args.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_getMissingTxIdList_args');
  if (this.network !== null && this.network !== undefined) {
    output.writeFieldBegin('network', Thrift.Type.I32, 1);
    output.writeI32(this.network);
    output.writeFieldEnd();
  }
  if (this.txids !== null && this.txids !== undefined) {
    output.writeFieldBegin('txids', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.txids.length);
    for (var iter39 in this.txids)
    {
      if (this.txids.hasOwnProperty(iter39))
      {
        iter39 = this.txids[iter39];
        output.writeString(iter39);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_getMissingTxIdList_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
blockstore.BlockStoreService_getMissingTxIdList_result.prototype = {};
blockstore.BlockStoreService_getMissingTxIdList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.success = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = input.readString().value;
          this.success.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_getMissingTxIdList_result.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_getMissingTxIdList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter47 in this.success)
    {
      if (this.success.hasOwnProperty(iter47))
      {
        iter47 = this.success[iter47];
        output.writeString(iter47);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_verifyTx_args = function(args) {
  this.network = null;
  this.tx = null;
  if (args) {
    if (args.network !== undefined) {
      this.network = args.network;
    }
    if (args.tx !== undefined) {
      this.tx = args.tx;
    }
  }
};
blockstore.BlockStoreService_verifyTx_args.prototype = {};
blockstore.BlockStoreService_verifyTx_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.network = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.tx = new blockstore.Tx();
        this.tx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_verifyTx_args.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_verifyTx_args');
  if (this.network !== null && this.network !== undefined) {
    output.writeFieldBegin('network', Thrift.Type.I32, 1);
    output.writeI32(this.network);
    output.writeFieldEnd();
  }
  if (this.tx !== null && this.tx !== undefined) {
    output.writeFieldBegin('tx', Thrift.Type.STRUCT, 2);
    this.tx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_verifyTx_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
blockstore.BlockStoreService_verifyTx_result.prototype = {};
blockstore.BlockStoreService_verifyTx_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new blockstore.Verification();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_verifyTx_result.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_verifyTx_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_addTxList_args = function(args) {
  this.network = null;
  this.txes = null;
  this.soft = true;
  if (args) {
    if (args.network !== undefined) {
      this.network = args.network;
    }
    if (args.txes !== undefined) {
      this.txes = args.txes;
    }
    if (args.soft !== undefined) {
      this.soft = args.soft;
    }
  }
};
blockstore.BlockStoreService_addTxList_args.prototype = {};
blockstore.BlockStoreService_addTxList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.network = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.txes = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = new blockstore.Tx();
          elem54.read(input);
          this.txes.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.soft = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_addTxList_args.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_addTxList_args');
  if (this.network !== null && this.network !== undefined) {
    output.writeFieldBegin('network', Thrift.Type.I32, 1);
    output.writeI32(this.network);
    output.writeFieldEnd();
  }
  if (this.txes !== null && this.txes !== undefined) {
    output.writeFieldBegin('txes', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.txes.length);
    for (var iter55 in this.txes)
    {
      if (this.txes.hasOwnProperty(iter55))
      {
        iter55 = this.txes[iter55];
        iter55.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.soft !== null && this.soft !== undefined) {
    output.writeFieldBegin('soft', Thrift.Type.BOOL, 3);
    output.writeBool(this.soft);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_addTxList_result = function(args) {
};
blockstore.BlockStoreService_addTxList_result.prototype = {};
blockstore.BlockStoreService_addTxList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_addTxList_result.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_addTxList_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_getTxListSince_args = function(args) {
  this.network = null;
  this.objId = null;
  if (args) {
    if (args.network !== undefined) {
      this.network = args.network;
    }
    if (args.objId !== undefined) {
      this.objId = args.objId;
    }
  }
};
blockstore.BlockStoreService_getTxListSince_args.prototype = {};
blockstore.BlockStoreService_getTxListSince_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.network = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.objId = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_getTxListSince_args.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_getTxListSince_args');
  if (this.network !== null && this.network !== undefined) {
    output.writeFieldBegin('network', Thrift.Type.I32, 1);
    output.writeI32(this.network);
    output.writeFieldEnd();
  }
  if (this.objId !== null && this.objId !== undefined) {
    output.writeFieldBegin('objId', Thrift.Type.STRING, 2);
    output.writeString(this.objId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_getTxListSince_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
blockstore.BlockStoreService_getTxListSince_result.prototype = {};
blockstore.BlockStoreService_getTxListSince_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.success = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = new blockstore.Tx();
          elem62.read(input);
          this.success.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_getTxListSince_result.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_getTxListSince_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter63 in this.success)
    {
      if (this.success.hasOwnProperty(iter63))
      {
        iter63 = this.success[iter63];
        iter63.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_getLatestTxList_args = function(args) {
  this.network = null;
  if (args) {
    if (args.network !== undefined) {
      this.network = args.network;
    }
  }
};
blockstore.BlockStoreService_getLatestTxList_args.prototype = {};
blockstore.BlockStoreService_getLatestTxList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.network = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_getLatestTxList_args.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_getLatestTxList_args');
  if (this.network !== null && this.network !== undefined) {
    output.writeFieldBegin('network', Thrift.Type.I32, 1);
    output.writeI32(this.network);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_getLatestTxList_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
blockstore.BlockStoreService_getLatestTxList_result.prototype = {};
blockstore.BlockStoreService_getLatestTxList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size64 = 0;
        var _rtmp368;
        this.success = [];
        var _etype67 = 0;
        _rtmp368 = input.readListBegin();
        _etype67 = _rtmp368.etype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var elem70 = null;
          elem70 = new blockstore.Tx();
          elem70.read(input);
          this.success.push(elem70);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_getLatestTxList_result.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_getLatestTxList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter71 in this.success)
    {
      if (this.success.hasOwnProperty(iter71))
      {
        iter71 = this.success[iter71];
        iter71.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_getRelatedTxList_args = function(args) {
  this.network = null;
  this.addresses = null;
  if (args) {
    if (args.network !== undefined) {
      this.network = args.network;
    }
    if (args.addresses !== undefined) {
      this.addresses = args.addresses;
    }
  }
};
blockstore.BlockStoreService_getRelatedTxList_args.prototype = {};
blockstore.BlockStoreService_getRelatedTxList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.network = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size72 = 0;
        var _rtmp376;
        this.addresses = [];
        var _etype75 = 0;
        _rtmp376 = input.readListBegin();
        _etype75 = _rtmp376.etype;
        _size72 = _rtmp376.size;
        for (var _i77 = 0; _i77 < _size72; ++_i77)
        {
          var elem78 = null;
          elem78 = input.readString().value;
          this.addresses.push(elem78);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_getRelatedTxList_args.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_getRelatedTxList_args');
  if (this.network !== null && this.network !== undefined) {
    output.writeFieldBegin('network', Thrift.Type.I32, 1);
    output.writeI32(this.network);
    output.writeFieldEnd();
  }
  if (this.addresses !== null && this.addresses !== undefined) {
    output.writeFieldBegin('addresses', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.addresses.length);
    for (var iter79 in this.addresses)
    {
      if (this.addresses.hasOwnProperty(iter79))
      {
        iter79 = this.addresses[iter79];
        output.writeString(iter79);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_getRelatedTxList_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
blockstore.BlockStoreService_getRelatedTxList_result.prototype = {};
blockstore.BlockStoreService_getRelatedTxList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size80 = 0;
        var _rtmp384;
        this.success = [];
        var _etype83 = 0;
        _rtmp384 = input.readListBegin();
        _etype83 = _rtmp384.etype;
        _size80 = _rtmp384.size;
        for (var _i85 = 0; _i85 < _size80; ++_i85)
        {
          var elem86 = null;
          elem86 = new blockstore.Tx();
          elem86.read(input);
          this.success.push(elem86);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_getRelatedTxList_result.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_getRelatedTxList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter87 in this.success)
    {
      if (this.success.hasOwnProperty(iter87))
      {
        iter87 = this.success[iter87];
        iter87.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_getRelatedTxIdList_args = function(args) {
  this.network = null;
  this.addresses = null;
  if (args) {
    if (args.network !== undefined) {
      this.network = args.network;
    }
    if (args.addresses !== undefined) {
      this.addresses = args.addresses;
    }
  }
};
blockstore.BlockStoreService_getRelatedTxIdList_args.prototype = {};
blockstore.BlockStoreService_getRelatedTxIdList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.network = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size88 = 0;
        var _rtmp392;
        this.addresses = [];
        var _etype91 = 0;
        _rtmp392 = input.readListBegin();
        _etype91 = _rtmp392.etype;
        _size88 = _rtmp392.size;
        for (var _i93 = 0; _i93 < _size88; ++_i93)
        {
          var elem94 = null;
          elem94 = input.readString().value;
          this.addresses.push(elem94);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_getRelatedTxIdList_args.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_getRelatedTxIdList_args');
  if (this.network !== null && this.network !== undefined) {
    output.writeFieldBegin('network', Thrift.Type.I32, 1);
    output.writeI32(this.network);
    output.writeFieldEnd();
  }
  if (this.addresses !== null && this.addresses !== undefined) {
    output.writeFieldBegin('addresses', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.addresses.length);
    for (var iter95 in this.addresses)
    {
      if (this.addresses.hasOwnProperty(iter95))
      {
        iter95 = this.addresses[iter95];
        output.writeString(iter95);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_getRelatedTxIdList_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
blockstore.BlockStoreService_getRelatedTxIdList_result.prototype = {};
blockstore.BlockStoreService_getRelatedTxIdList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size96 = 0;
        var _rtmp3100;
        this.success = [];
        var _etype99 = 0;
        _rtmp3100 = input.readListBegin();
        _etype99 = _rtmp3100.etype;
        _size96 = _rtmp3100.size;
        for (var _i101 = 0; _i101 < _size96; ++_i101)
        {
          var elem102 = null;
          elem102 = input.readString().value;
          this.success.push(elem102);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_getRelatedTxIdList_result.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_getRelatedTxIdList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter103 in this.success)
    {
      if (this.success.hasOwnProperty(iter103))
      {
        iter103 = this.success[iter103];
        output.writeString(iter103);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_getSendingTxList_args = function(args) {
  this.network = null;
  if (args) {
    if (args.network !== undefined) {
      this.network = args.network;
    }
  }
};
blockstore.BlockStoreService_getSendingTxList_args.prototype = {};
blockstore.BlockStoreService_getSendingTxList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.network = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_getSendingTxList_args.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_getSendingTxList_args');
  if (this.network !== null && this.network !== undefined) {
    output.writeFieldBegin('network', Thrift.Type.I32, 1);
    output.writeI32(this.network);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_getSendingTxList_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
blockstore.BlockStoreService_getSendingTxList_result.prototype = {};
blockstore.BlockStoreService_getSendingTxList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size104 = 0;
        var _rtmp3108;
        this.success = [];
        var _etype107 = 0;
        _rtmp3108 = input.readListBegin();
        _etype107 = _rtmp3108.etype;
        _size104 = _rtmp3108.size;
        for (var _i109 = 0; _i109 < _size104; ++_i109)
        {
          var elem110 = null;
          elem110 = new blockstore.SendTx();
          elem110.read(input);
          this.success.push(elem110);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_getSendingTxList_result.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_getSendingTxList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter111 in this.success)
    {
      if (this.success.hasOwnProperty(iter111))
      {
        iter111 = this.success[iter111];
        iter111.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_sendTx_args = function(args) {
  this.network = null;
  this.sendTx = null;
  if (args) {
    if (args.network !== undefined) {
      this.network = args.network;
    }
    if (args.sendTx !== undefined) {
      this.sendTx = args.sendTx;
    }
  }
};
blockstore.BlockStoreService_sendTx_args.prototype = {};
blockstore.BlockStoreService_sendTx_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.network = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.sendTx = new blockstore.SendTx();
        this.sendTx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_sendTx_args.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_sendTx_args');
  if (this.network !== null && this.network !== undefined) {
    output.writeFieldBegin('network', Thrift.Type.I32, 1);
    output.writeI32(this.network);
    output.writeFieldEnd();
  }
  if (this.sendTx !== null && this.sendTx !== undefined) {
    output.writeFieldBegin('sendTx', Thrift.Type.STRUCT, 2);
    this.sendTx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_sendTx_result = function(args) {
  this.e = null;
  if (args instanceof blockstore.AppException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
blockstore.BlockStoreService_sendTx_result.prototype = {};
blockstore.BlockStoreService_sendTx_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new blockstore.AppException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_sendTx_result.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_sendTx_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_getUnspent_args = function(args) {
  this.network = null;
  this.addresses = null;
  if (args) {
    if (args.network !== undefined) {
      this.network = args.network;
    }
    if (args.addresses !== undefined) {
      this.addresses = args.addresses;
    }
  }
};
blockstore.BlockStoreService_getUnspent_args.prototype = {};
blockstore.BlockStoreService_getUnspent_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.network = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size112 = 0;
        var _rtmp3116;
        this.addresses = [];
        var _etype115 = 0;
        _rtmp3116 = input.readListBegin();
        _etype115 = _rtmp3116.etype;
        _size112 = _rtmp3116.size;
        for (var _i117 = 0; _i117 < _size112; ++_i117)
        {
          var elem118 = null;
          elem118 = input.readString().value;
          this.addresses.push(elem118);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_getUnspent_args.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_getUnspent_args');
  if (this.network !== null && this.network !== undefined) {
    output.writeFieldBegin('network', Thrift.Type.I32, 1);
    output.writeI32(this.network);
    output.writeFieldEnd();
  }
  if (this.addresses !== null && this.addresses !== undefined) {
    output.writeFieldBegin('addresses', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.addresses.length);
    for (var iter119 in this.addresses)
    {
      if (this.addresses.hasOwnProperty(iter119))
      {
        iter119 = this.addresses[iter119];
        output.writeString(iter119);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_getUnspent_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
blockstore.BlockStoreService_getUnspent_result.prototype = {};
blockstore.BlockStoreService_getUnspent_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size120 = 0;
        var _rtmp3124;
        this.success = [];
        var _etype123 = 0;
        _rtmp3124 = input.readListBegin();
        _etype123 = _rtmp3124.etype;
        _size120 = _rtmp3124.size;
        for (var _i125 = 0; _i125 < _size120; ++_i125)
        {
          var elem126 = null;
          elem126 = new blockstore.UTXO();
          elem126.read(input);
          this.success.push(elem126);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_getUnspent_result.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_getUnspent_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter127 in this.success)
    {
      if (this.success.hasOwnProperty(iter127))
      {
        iter127 = this.success[iter127];
        iter127.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_getMissingInvList_args = function(args) {
  this.network = null;
  this.invs = null;
  if (args) {
    if (args.network !== undefined) {
      this.network = args.network;
    }
    if (args.invs !== undefined) {
      this.invs = args.invs;
    }
  }
};
blockstore.BlockStoreService_getMissingInvList_args.prototype = {};
blockstore.BlockStoreService_getMissingInvList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.network = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size128 = 0;
        var _rtmp3132;
        this.invs = [];
        var _etype131 = 0;
        _rtmp3132 = input.readListBegin();
        _etype131 = _rtmp3132.etype;
        _size128 = _rtmp3132.size;
        for (var _i133 = 0; _i133 < _size128; ++_i133)
        {
          var elem134 = null;
          elem134 = new blockstore.Inventory();
          elem134.read(input);
          this.invs.push(elem134);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_getMissingInvList_args.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_getMissingInvList_args');
  if (this.network !== null && this.network !== undefined) {
    output.writeFieldBegin('network', Thrift.Type.I32, 1);
    output.writeI32(this.network);
    output.writeFieldEnd();
  }
  if (this.invs !== null && this.invs !== undefined) {
    output.writeFieldBegin('invs', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.invs.length);
    for (var iter135 in this.invs)
    {
      if (this.invs.hasOwnProperty(iter135))
      {
        iter135 = this.invs[iter135];
        iter135.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_getMissingInvList_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
blockstore.BlockStoreService_getMissingInvList_result.prototype = {};
blockstore.BlockStoreService_getMissingInvList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size136 = 0;
        var _rtmp3140;
        this.success = [];
        var _etype139 = 0;
        _rtmp3140 = input.readListBegin();
        _etype139 = _rtmp3140.etype;
        _size136 = _rtmp3140.size;
        for (var _i141 = 0; _i141 < _size136; ++_i141)
        {
          var elem142 = null;
          elem142 = new blockstore.Inventory();
          elem142.read(input);
          this.success.push(elem142);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_getMissingInvList_result.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_getMissingInvList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter143 in this.success)
    {
      if (this.success.hasOwnProperty(iter143))
      {
        iter143 = this.success[iter143];
        iter143.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
blockstore.BlockStoreServiceClient.prototype = {};
blockstore.BlockStoreServiceClient.prototype.getBlock = function(network, blockhash) {
  this.send_getBlock(network, blockhash);
  return this.recv_getBlock();
};

blockstore.BlockStoreServiceClient.prototype.send_getBlock = function(network, blockhash) {
  this.output.writeMessageBegin('getBlock', Thrift.MessageType.CALL, this.seqid);
  var args = new blockstore.BlockStoreService_getBlock_args();
  args.network = network;
  args.blockhash = blockhash;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

blockstore.BlockStoreServiceClient.prototype.recv_getBlock = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new blockstore.BlockStoreService_getBlock_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getBlock failed: unknown result';
};
blockstore.BlockStoreServiceClient.prototype.getTipBlock = function(network) {
  this.send_getTipBlock(network);
  return this.recv_getTipBlock();
};

blockstore.BlockStoreServiceClient.prototype.send_getTipBlock = function(network) {
  this.output.writeMessageBegin('getTipBlock', Thrift.MessageType.CALL, this.seqid);
  var args = new blockstore.BlockStoreService_getTipBlock_args();
  args.network = network;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

blockstore.BlockStoreServiceClient.prototype.recv_getTipBlock = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new blockstore.BlockStoreService_getTipBlock_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getTipBlock failed: unknown result';
};
blockstore.BlockStoreServiceClient.prototype.verifyBlock = function(network, block) {
  this.send_verifyBlock(network, block);
  return this.recv_verifyBlock();
};

blockstore.BlockStoreServiceClient.prototype.send_verifyBlock = function(network, block) {
  this.output.writeMessageBegin('verifyBlock', Thrift.MessageType.CALL, this.seqid);
  var args = new blockstore.BlockStoreService_verifyBlock_args();
  args.network = network;
  args.block = block;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

blockstore.BlockStoreServiceClient.prototype.recv_verifyBlock = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new blockstore.BlockStoreService_verifyBlock_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'verifyBlock failed: unknown result';
};
blockstore.BlockStoreServiceClient.prototype.addBlock = function(network, block) {
  this.send_addBlock(network, block);
  this.recv_addBlock();
};

blockstore.BlockStoreServiceClient.prototype.send_addBlock = function(network, block) {
  this.output.writeMessageBegin('addBlock', Thrift.MessageType.CALL, this.seqid);
  var args = new blockstore.BlockStoreService_addBlock_args();
  args.network = network;
  args.block = block;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

blockstore.BlockStoreServiceClient.prototype.recv_addBlock = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new blockstore.BlockStoreService_addBlock_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
blockstore.BlockStoreServiceClient.prototype.getTx = function(network, txid) {
  this.send_getTx(network, txid);
  return this.recv_getTx();
};

blockstore.BlockStoreServiceClient.prototype.send_getTx = function(network, txid) {
  this.output.writeMessageBegin('getTx', Thrift.MessageType.CALL, this.seqid);
  var args = new blockstore.BlockStoreService_getTx_args();
  args.network = network;
  args.txid = txid;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

blockstore.BlockStoreServiceClient.prototype.recv_getTx = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new blockstore.BlockStoreService_getTx_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'getTx failed: unknown result';
};
blockstore.BlockStoreServiceClient.prototype.getTxList = function(network, txids) {
  this.send_getTxList(network, txids);
  return this.recv_getTxList();
};

blockstore.BlockStoreServiceClient.prototype.send_getTxList = function(network, txids) {
  this.output.writeMessageBegin('getTxList', Thrift.MessageType.CALL, this.seqid);
  var args = new blockstore.BlockStoreService_getTxList_args();
  args.network = network;
  args.txids = txids;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

blockstore.BlockStoreServiceClient.prototype.recv_getTxList = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new blockstore.BlockStoreService_getTxList_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getTxList failed: unknown result';
};
blockstore.BlockStoreServiceClient.prototype.getMissingTxIdList = function(network, txids) {
  this.send_getMissingTxIdList(network, txids);
  return this.recv_getMissingTxIdList();
};

blockstore.BlockStoreServiceClient.prototype.send_getMissingTxIdList = function(network, txids) {
  this.output.writeMessageBegin('getMissingTxIdList', Thrift.MessageType.CALL, this.seqid);
  var args = new blockstore.BlockStoreService_getMissingTxIdList_args();
  args.network = network;
  args.txids = txids;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

blockstore.BlockStoreServiceClient.prototype.recv_getMissingTxIdList = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new blockstore.BlockStoreService_getMissingTxIdList_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getMissingTxIdList failed: unknown result';
};
blockstore.BlockStoreServiceClient.prototype.verifyTx = function(network, tx) {
  this.send_verifyTx(network, tx);
  return this.recv_verifyTx();
};

blockstore.BlockStoreServiceClient.prototype.send_verifyTx = function(network, tx) {
  this.output.writeMessageBegin('verifyTx', Thrift.MessageType.CALL, this.seqid);
  var args = new blockstore.BlockStoreService_verifyTx_args();
  args.network = network;
  args.tx = tx;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

blockstore.BlockStoreServiceClient.prototype.recv_verifyTx = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new blockstore.BlockStoreService_verifyTx_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'verifyTx failed: unknown result';
};
blockstore.BlockStoreServiceClient.prototype.addTxList = function(network, txes, soft) {
  this.send_addTxList(network, txes, soft);
  this.recv_addTxList();
};

blockstore.BlockStoreServiceClient.prototype.send_addTxList = function(network, txes, soft) {
  this.output.writeMessageBegin('addTxList', Thrift.MessageType.CALL, this.seqid);
  var args = new blockstore.BlockStoreService_addTxList_args();
  args.network = network;
  args.txes = txes;
  args.soft = soft;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

blockstore.BlockStoreServiceClient.prototype.recv_addTxList = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new blockstore.BlockStoreService_addTxList_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
blockstore.BlockStoreServiceClient.prototype.getTxListSince = function(network, objId) {
  this.send_getTxListSince(network, objId);
  return this.recv_getTxListSince();
};

blockstore.BlockStoreServiceClient.prototype.send_getTxListSince = function(network, objId) {
  this.output.writeMessageBegin('getTxListSince', Thrift.MessageType.CALL, this.seqid);
  var args = new blockstore.BlockStoreService_getTxListSince_args();
  args.network = network;
  args.objId = objId;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

blockstore.BlockStoreServiceClient.prototype.recv_getTxListSince = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new blockstore.BlockStoreService_getTxListSince_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getTxListSince failed: unknown result';
};
blockstore.BlockStoreServiceClient.prototype.getLatestTxList = function(network) {
  this.send_getLatestTxList(network);
  return this.recv_getLatestTxList();
};

blockstore.BlockStoreServiceClient.prototype.send_getLatestTxList = function(network) {
  this.output.writeMessageBegin('getLatestTxList', Thrift.MessageType.CALL, this.seqid);
  var args = new blockstore.BlockStoreService_getLatestTxList_args();
  args.network = network;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

blockstore.BlockStoreServiceClient.prototype.recv_getLatestTxList = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new blockstore.BlockStoreService_getLatestTxList_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getLatestTxList failed: unknown result';
};
blockstore.BlockStoreServiceClient.prototype.getRelatedTxList = function(network, addresses) {
  this.send_getRelatedTxList(network, addresses);
  return this.recv_getRelatedTxList();
};

blockstore.BlockStoreServiceClient.prototype.send_getRelatedTxList = function(network, addresses) {
  this.output.writeMessageBegin('getRelatedTxList', Thrift.MessageType.CALL, this.seqid);
  var args = new blockstore.BlockStoreService_getRelatedTxList_args();
  args.network = network;
  args.addresses = addresses;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

blockstore.BlockStoreServiceClient.prototype.recv_getRelatedTxList = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new blockstore.BlockStoreService_getRelatedTxList_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getRelatedTxList failed: unknown result';
};
blockstore.BlockStoreServiceClient.prototype.getRelatedTxIdList = function(network, addresses) {
  this.send_getRelatedTxIdList(network, addresses);
  return this.recv_getRelatedTxIdList();
};

blockstore.BlockStoreServiceClient.prototype.send_getRelatedTxIdList = function(network, addresses) {
  this.output.writeMessageBegin('getRelatedTxIdList', Thrift.MessageType.CALL, this.seqid);
  var args = new blockstore.BlockStoreService_getRelatedTxIdList_args();
  args.network = network;
  args.addresses = addresses;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

blockstore.BlockStoreServiceClient.prototype.recv_getRelatedTxIdList = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new blockstore.BlockStoreService_getRelatedTxIdList_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getRelatedTxIdList failed: unknown result';
};
blockstore.BlockStoreServiceClient.prototype.getSendingTxList = function(network) {
  this.send_getSendingTxList(network);
  return this.recv_getSendingTxList();
};

blockstore.BlockStoreServiceClient.prototype.send_getSendingTxList = function(network) {
  this.output.writeMessageBegin('getSendingTxList', Thrift.MessageType.CALL, this.seqid);
  var args = new blockstore.BlockStoreService_getSendingTxList_args();
  args.network = network;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

blockstore.BlockStoreServiceClient.prototype.recv_getSendingTxList = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new blockstore.BlockStoreService_getSendingTxList_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getSendingTxList failed: unknown result';
};
blockstore.BlockStoreServiceClient.prototype.sendTx = function(network, sendTx) {
  this.send_sendTx(network, sendTx);
  this.recv_sendTx();
};

blockstore.BlockStoreServiceClient.prototype.send_sendTx = function(network, sendTx) {
  this.output.writeMessageBegin('sendTx', Thrift.MessageType.CALL, this.seqid);
  var args = new blockstore.BlockStoreService_sendTx_args();
  args.network = network;
  args.sendTx = sendTx;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

blockstore.BlockStoreServiceClient.prototype.recv_sendTx = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new blockstore.BlockStoreService_sendTx_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.e) {
    throw result.e;
  }
  return;
};
blockstore.BlockStoreServiceClient.prototype.getUnspent = function(network, addresses) {
  this.send_getUnspent(network, addresses);
  return this.recv_getUnspent();
};

blockstore.BlockStoreServiceClient.prototype.send_getUnspent = function(network, addresses) {
  this.output.writeMessageBegin('getUnspent', Thrift.MessageType.CALL, this.seqid);
  var args = new blockstore.BlockStoreService_getUnspent_args();
  args.network = network;
  args.addresses = addresses;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

blockstore.BlockStoreServiceClient.prototype.recv_getUnspent = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new blockstore.BlockStoreService_getUnspent_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getUnspent failed: unknown result';
};
blockstore.BlockStoreServiceClient.prototype.getMissingInvList = function(network, invs) {
  this.send_getMissingInvList(network, invs);
  return this.recv_getMissingInvList();
};

blockstore.BlockStoreServiceClient.prototype.send_getMissingInvList = function(network, invs) {
  this.output.writeMessageBegin('getMissingInvList', Thrift.MessageType.CALL, this.seqid);
  var args = new blockstore.BlockStoreService_getMissingInvList_args();
  args.network = network;
  args.invs = invs;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

blockstore.BlockStoreServiceClient.prototype.recv_getMissingInvList = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new blockstore.BlockStoreService_getMissingInvList_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getMissingInvList failed: unknown result';
};
