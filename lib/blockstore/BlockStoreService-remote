#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from blockstore import BlockStoreService
from blockstore.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  Block getBlock(Network network, string blockhash)')
  print('  Block getTipBlock(Network network)')
  print('   getTailBlockList(Network network, i32 n)')
  print('  Verification verifyBlock(Network network, Block block)')
  print('  void addBlock(Network network, Block block,  txIds)')
  print('  void rewindTip(Network network, i32 height)')
  print('  Tx getTx(Network network, string txid)')
  print('   getTxList(Network network,  txids)')
  print('   getMissingTxIdList(Network network,  txids)')
  print('  Verification verifyTx(Network network, Tx tx, bool mempool)')
  print('  void addTxList(Network network,  txes, bool mempool)')
  print('  void removeTx(Network network, string txid)')
  print('   getTxListSince(Network network, string objId, i32 n)')
  print('   getTailTxList(Network network, i32 n)')
  print('   getRelatedTxList(Network network,  addresses)')
  print('   getRelatedTxIdList(Network network,  addresses)')
  print('   getSendingTxList(Network network)')
  print('   getSendTxList(Network network,  txids)')
  print('  void sendTx(Network network, SendTx sendTx)')
  print('   getUnspent(Network network,  addresses)')
  print('   getMissingInvList(Network network,  invs)')
  print('  void pushPeers(Network network,  peers)')
  print('   popPeers(Network network, i32 n)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = BlockStoreService.Client(protocol)
transport.open()

if cmd == 'getBlock':
  if len(args) != 2:
    print('getBlock requires 2 args')
    sys.exit(1)
  pp.pprint(client.getBlock(eval(args[0]),args[1],))

elif cmd == 'getTipBlock':
  if len(args) != 1:
    print('getTipBlock requires 1 args')
    sys.exit(1)
  pp.pprint(client.getTipBlock(eval(args[0]),))

elif cmd == 'getTailBlockList':
  if len(args) != 2:
    print('getTailBlockList requires 2 args')
    sys.exit(1)
  pp.pprint(client.getTailBlockList(eval(args[0]),eval(args[1]),))

elif cmd == 'verifyBlock':
  if len(args) != 2:
    print('verifyBlock requires 2 args')
    sys.exit(1)
  pp.pprint(client.verifyBlock(eval(args[0]),eval(args[1]),))

elif cmd == 'addBlock':
  if len(args) != 3:
    print('addBlock requires 3 args')
    sys.exit(1)
  pp.pprint(client.addBlock(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'rewindTip':
  if len(args) != 2:
    print('rewindTip requires 2 args')
    sys.exit(1)
  pp.pprint(client.rewindTip(eval(args[0]),eval(args[1]),))

elif cmd == 'getTx':
  if len(args) != 2:
    print('getTx requires 2 args')
    sys.exit(1)
  pp.pprint(client.getTx(eval(args[0]),args[1],))

elif cmd == 'getTxList':
  if len(args) != 2:
    print('getTxList requires 2 args')
    sys.exit(1)
  pp.pprint(client.getTxList(eval(args[0]),eval(args[1]),))

elif cmd == 'getMissingTxIdList':
  if len(args) != 2:
    print('getMissingTxIdList requires 2 args')
    sys.exit(1)
  pp.pprint(client.getMissingTxIdList(eval(args[0]),eval(args[1]),))

elif cmd == 'verifyTx':
  if len(args) != 3:
    print('verifyTx requires 3 args')
    sys.exit(1)
  pp.pprint(client.verifyTx(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'addTxList':
  if len(args) != 3:
    print('addTxList requires 3 args')
    sys.exit(1)
  pp.pprint(client.addTxList(eval(args[0]),eval(args[1]),eval(args[2]),))

elif cmd == 'removeTx':
  if len(args) != 2:
    print('removeTx requires 2 args')
    sys.exit(1)
  pp.pprint(client.removeTx(eval(args[0]),args[1],))

elif cmd == 'getTxListSince':
  if len(args) != 3:
    print('getTxListSince requires 3 args')
    sys.exit(1)
  pp.pprint(client.getTxListSince(eval(args[0]),args[1],eval(args[2]),))

elif cmd == 'getTailTxList':
  if len(args) != 2:
    print('getTailTxList requires 2 args')
    sys.exit(1)
  pp.pprint(client.getTailTxList(eval(args[0]),eval(args[1]),))

elif cmd == 'getRelatedTxList':
  if len(args) != 2:
    print('getRelatedTxList requires 2 args')
    sys.exit(1)
  pp.pprint(client.getRelatedTxList(eval(args[0]),eval(args[1]),))

elif cmd == 'getRelatedTxIdList':
  if len(args) != 2:
    print('getRelatedTxIdList requires 2 args')
    sys.exit(1)
  pp.pprint(client.getRelatedTxIdList(eval(args[0]),eval(args[1]),))

elif cmd == 'getSendingTxList':
  if len(args) != 1:
    print('getSendingTxList requires 1 args')
    sys.exit(1)
  pp.pprint(client.getSendingTxList(eval(args[0]),))

elif cmd == 'getSendTxList':
  if len(args) != 2:
    print('getSendTxList requires 2 args')
    sys.exit(1)
  pp.pprint(client.getSendTxList(eval(args[0]),eval(args[1]),))

elif cmd == 'sendTx':
  if len(args) != 2:
    print('sendTx requires 2 args')
    sys.exit(1)
  pp.pprint(client.sendTx(eval(args[0]),eval(args[1]),))

elif cmd == 'getUnspent':
  if len(args) != 2:
    print('getUnspent requires 2 args')
    sys.exit(1)
  pp.pprint(client.getUnspent(eval(args[0]),eval(args[1]),))

elif cmd == 'getMissingInvList':
  if len(args) != 2:
    print('getMissingInvList requires 2 args')
    sys.exit(1)
  pp.pprint(client.getMissingInvList(eval(args[0]),eval(args[1]),))

elif cmd == 'pushPeers':
  if len(args) != 2:
    print('pushPeers requires 2 args')
    sys.exit(1)
  pp.pprint(client.pushPeers(eval(args[0]),eval(args[1]),))

elif cmd == 'popPeers':
  if len(args) != 2:
    print('popPeers requires 2 args')
    sys.exit(1)
  pp.pprint(client.popPeers(eval(args[0]),eval(args[1]),))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
