//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./blockstore_types');
//HELPER FUNCTIONS AND STRUCTURES

blockstore.BlockStoreService_getBlock_args = function(args) {
  this.network = null;
  this.blockhash = null;
  if (args) {
    if (args.network !== undefined) {
      this.network = args.network;
    }
    if (args.blockhash !== undefined) {
      this.blockhash = args.blockhash;
    }
  }
};
blockstore.BlockStoreService_getBlock_args.prototype = {};
blockstore.BlockStoreService_getBlock_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.network = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.blockhash = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_getBlock_args.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_getBlock_args');
  if (this.network !== null && this.network !== undefined) {
    output.writeFieldBegin('network', Thrift.Type.I32, 1);
    output.writeI32(this.network);
    output.writeFieldEnd();
  }
  if (this.blockhash !== null && this.blockhash !== undefined) {
    output.writeFieldBegin('blockhash', Thrift.Type.STRING, 2);
    output.writeBinary(this.blockhash);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_getBlock_result = function(args) {
  this.success = null;
  this.notfound = null;
  if (args instanceof ttypes.NotFound) {
    this.notfound = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.notfound !== undefined) {
      this.notfound = args.notfound;
    }
  }
};
blockstore.BlockStoreService_getBlock_result.prototype = {};
blockstore.BlockStoreService_getBlock_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Block();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.notfound = new ttypes.NotFound();
        this.notfound.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_getBlock_result.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_getBlock_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.notfound !== null && this.notfound !== undefined) {
    output.writeFieldBegin('notfound', Thrift.Type.STRUCT, 1);
    this.notfound.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_getTipBlock_args = function(args) {
  this.network = null;
  if (args) {
    if (args.network !== undefined) {
      this.network = args.network;
    }
  }
};
blockstore.BlockStoreService_getTipBlock_args.prototype = {};
blockstore.BlockStoreService_getTipBlock_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.network = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_getTipBlock_args.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_getTipBlock_args');
  if (this.network !== null && this.network !== undefined) {
    output.writeFieldBegin('network', Thrift.Type.I32, 1);
    output.writeI32(this.network);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_getTipBlock_result = function(args) {
  this.success = null;
  this.notfound = null;
  if (args instanceof ttypes.NotFound) {
    this.notfound = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.notfound !== undefined) {
      this.notfound = args.notfound;
    }
  }
};
blockstore.BlockStoreService_getTipBlock_result.prototype = {};
blockstore.BlockStoreService_getTipBlock_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Block();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.notfound = new ttypes.NotFound();
        this.notfound.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_getTipBlock_result.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_getTipBlock_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.notfound !== null && this.notfound !== undefined) {
    output.writeFieldBegin('notfound', Thrift.Type.STRUCT, 1);
    this.notfound.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_getTailBlockList_args = function(args) {
  this.network = null;
  this.n = null;
  if (args) {
    if (args.network !== undefined) {
      this.network = args.network;
    }
    if (args.n !== undefined) {
      this.n = args.n;
    }
  }
};
blockstore.BlockStoreService_getTailBlockList_args.prototype = {};
blockstore.BlockStoreService_getTailBlockList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.network = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.n = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_getTailBlockList_args.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_getTailBlockList_args');
  if (this.network !== null && this.network !== undefined) {
    output.writeFieldBegin('network', Thrift.Type.I32, 1);
    output.writeI32(this.network);
    output.writeFieldEnd();
  }
  if (this.n !== null && this.n !== undefined) {
    output.writeFieldBegin('n', Thrift.Type.I32, 2);
    output.writeI32(this.n);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_getTailBlockList_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
blockstore.BlockStoreService_getTailBlockList_result.prototype = {};
blockstore.BlockStoreService_getTailBlockList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.success = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new ttypes.Block();
          elem22.read(input);
          this.success.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_getTailBlockList_result.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_getTailBlockList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter23 in this.success)
    {
      if (this.success.hasOwnProperty(iter23))
      {
        iter23 = this.success[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_verifyBlock_args = function(args) {
  this.network = null;
  this.block = null;
  if (args) {
    if (args.network !== undefined) {
      this.network = args.network;
    }
    if (args.block !== undefined) {
      this.block = args.block;
    }
  }
};
blockstore.BlockStoreService_verifyBlock_args.prototype = {};
blockstore.BlockStoreService_verifyBlock_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.network = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.block = new ttypes.Block();
        this.block.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_verifyBlock_args.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_verifyBlock_args');
  if (this.network !== null && this.network !== undefined) {
    output.writeFieldBegin('network', Thrift.Type.I32, 1);
    output.writeI32(this.network);
    output.writeFieldEnd();
  }
  if (this.block !== null && this.block !== undefined) {
    output.writeFieldBegin('block', Thrift.Type.STRUCT, 2);
    this.block.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_verifyBlock_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
blockstore.BlockStoreService_verifyBlock_result.prototype = {};
blockstore.BlockStoreService_verifyBlock_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Verification();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_verifyBlock_result.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_verifyBlock_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_addBlock_args = function(args) {
  this.network = null;
  this.block = null;
  this.txIds = null;
  if (args) {
    if (args.network !== undefined) {
      this.network = args.network;
    }
    if (args.block !== undefined) {
      this.block = args.block;
    }
    if (args.txIds !== undefined) {
      this.txIds = args.txIds;
    }
  }
};
blockstore.BlockStoreService_addBlock_args.prototype = {};
blockstore.BlockStoreService_addBlock_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.network = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.block = new ttypes.Block();
        this.block.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.txIds = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = input.readBinary();
          this.txIds.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_addBlock_args.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_addBlock_args');
  if (this.network !== null && this.network !== undefined) {
    output.writeFieldBegin('network', Thrift.Type.I32, 1);
    output.writeI32(this.network);
    output.writeFieldEnd();
  }
  if (this.block !== null && this.block !== undefined) {
    output.writeFieldBegin('block', Thrift.Type.STRUCT, 2);
    this.block.write(output);
    output.writeFieldEnd();
  }
  if (this.txIds !== null && this.txIds !== undefined) {
    output.writeFieldBegin('txIds', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.txIds.length);
    for (var iter31 in this.txIds)
    {
      if (this.txIds.hasOwnProperty(iter31))
      {
        iter31 = this.txIds[iter31];
        output.writeBinary(iter31);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_addBlock_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.AppException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
blockstore.BlockStoreService_addBlock_result.prototype = {};
blockstore.BlockStoreService_addBlock_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.AppException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_addBlock_result.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_addBlock_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_getTx_args = function(args) {
  this.network = null;
  this.txid = null;
  if (args) {
    if (args.network !== undefined) {
      this.network = args.network;
    }
    if (args.txid !== undefined) {
      this.txid = args.txid;
    }
  }
};
blockstore.BlockStoreService_getTx_args.prototype = {};
blockstore.BlockStoreService_getTx_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.network = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.txid = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_getTx_args.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_getTx_args');
  if (this.network !== null && this.network !== undefined) {
    output.writeFieldBegin('network', Thrift.Type.I32, 1);
    output.writeI32(this.network);
    output.writeFieldEnd();
  }
  if (this.txid !== null && this.txid !== undefined) {
    output.writeFieldBegin('txid', Thrift.Type.STRING, 2);
    output.writeBinary(this.txid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_getTx_result = function(args) {
  this.success = null;
  this.notfound = null;
  if (args instanceof ttypes.NotFound) {
    this.notfound = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.notfound !== undefined) {
      this.notfound = args.notfound;
    }
  }
};
blockstore.BlockStoreService_getTx_result.prototype = {};
blockstore.BlockStoreService_getTx_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Tx();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.notfound = new ttypes.NotFound();
        this.notfound.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_getTx_result.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_getTx_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.notfound !== null && this.notfound !== undefined) {
    output.writeFieldBegin('notfound', Thrift.Type.STRUCT, 1);
    this.notfound.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_getTxList_args = function(args) {
  this.network = null;
  this.txids = null;
  if (args) {
    if (args.network !== undefined) {
      this.network = args.network;
    }
    if (args.txids !== undefined) {
      this.txids = args.txids;
    }
  }
};
blockstore.BlockStoreService_getTxList_args.prototype = {};
blockstore.BlockStoreService_getTxList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.network = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.txids = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = input.readBinary();
          this.txids.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_getTxList_args.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_getTxList_args');
  if (this.network !== null && this.network !== undefined) {
    output.writeFieldBegin('network', Thrift.Type.I32, 1);
    output.writeI32(this.network);
    output.writeFieldEnd();
  }
  if (this.txids !== null && this.txids !== undefined) {
    output.writeFieldBegin('txids', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.txids.length);
    for (var iter39 in this.txids)
    {
      if (this.txids.hasOwnProperty(iter39))
      {
        iter39 = this.txids[iter39];
        output.writeBinary(iter39);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_getTxList_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
blockstore.BlockStoreService_getTxList_result.prototype = {};
blockstore.BlockStoreService_getTxList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.success = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = new ttypes.Tx();
          elem46.read(input);
          this.success.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_getTxList_result.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_getTxList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter47 in this.success)
    {
      if (this.success.hasOwnProperty(iter47))
      {
        iter47 = this.success[iter47];
        iter47.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_getMissingTxIdList_args = function(args) {
  this.network = null;
  this.txids = null;
  if (args) {
    if (args.network !== undefined) {
      this.network = args.network;
    }
    if (args.txids !== undefined) {
      this.txids = args.txids;
    }
  }
};
blockstore.BlockStoreService_getMissingTxIdList_args.prototype = {};
blockstore.BlockStoreService_getMissingTxIdList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.network = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.txids = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = input.readBinary();
          this.txids.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_getMissingTxIdList_args.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_getMissingTxIdList_args');
  if (this.network !== null && this.network !== undefined) {
    output.writeFieldBegin('network', Thrift.Type.I32, 1);
    output.writeI32(this.network);
    output.writeFieldEnd();
  }
  if (this.txids !== null && this.txids !== undefined) {
    output.writeFieldBegin('txids', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.txids.length);
    for (var iter55 in this.txids)
    {
      if (this.txids.hasOwnProperty(iter55))
      {
        iter55 = this.txids[iter55];
        output.writeBinary(iter55);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_getMissingTxIdList_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
blockstore.BlockStoreService_getMissingTxIdList_result.prototype = {};
blockstore.BlockStoreService_getMissingTxIdList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.success = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = input.readBinary();
          this.success.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_getMissingTxIdList_result.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_getMissingTxIdList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter63 in this.success)
    {
      if (this.success.hasOwnProperty(iter63))
      {
        iter63 = this.success[iter63];
        output.writeBinary(iter63);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_verifyTx_args = function(args) {
  this.network = null;
  this.tx = null;
  this.mempool = null;
  if (args) {
    if (args.network !== undefined) {
      this.network = args.network;
    }
    if (args.tx !== undefined) {
      this.tx = args.tx;
    }
    if (args.mempool !== undefined) {
      this.mempool = args.mempool;
    }
  }
};
blockstore.BlockStoreService_verifyTx_args.prototype = {};
blockstore.BlockStoreService_verifyTx_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.network = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.tx = new ttypes.Tx();
        this.tx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.mempool = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_verifyTx_args.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_verifyTx_args');
  if (this.network !== null && this.network !== undefined) {
    output.writeFieldBegin('network', Thrift.Type.I32, 1);
    output.writeI32(this.network);
    output.writeFieldEnd();
  }
  if (this.tx !== null && this.tx !== undefined) {
    output.writeFieldBegin('tx', Thrift.Type.STRUCT, 2);
    this.tx.write(output);
    output.writeFieldEnd();
  }
  if (this.mempool !== null && this.mempool !== undefined) {
    output.writeFieldBegin('mempool', Thrift.Type.BOOL, 3);
    output.writeBool(this.mempool);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_verifyTx_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
blockstore.BlockStoreService_verifyTx_result.prototype = {};
blockstore.BlockStoreService_verifyTx_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Verification();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_verifyTx_result.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_verifyTx_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_addTxList_args = function(args) {
  this.network = null;
  this.txes = null;
  this.mempool = null;
  if (args) {
    if (args.network !== undefined) {
      this.network = args.network;
    }
    if (args.txes !== undefined) {
      this.txes = args.txes;
    }
    if (args.mempool !== undefined) {
      this.mempool = args.mempool;
    }
  }
};
blockstore.BlockStoreService_addTxList_args.prototype = {};
blockstore.BlockStoreService_addTxList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.network = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size64 = 0;
        var _rtmp368;
        this.txes = [];
        var _etype67 = 0;
        _rtmp368 = input.readListBegin();
        _etype67 = _rtmp368.etype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var elem70 = null;
          elem70 = new ttypes.Tx();
          elem70.read(input);
          this.txes.push(elem70);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.mempool = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_addTxList_args.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_addTxList_args');
  if (this.network !== null && this.network !== undefined) {
    output.writeFieldBegin('network', Thrift.Type.I32, 1);
    output.writeI32(this.network);
    output.writeFieldEnd();
  }
  if (this.txes !== null && this.txes !== undefined) {
    output.writeFieldBegin('txes', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.txes.length);
    for (var iter71 in this.txes)
    {
      if (this.txes.hasOwnProperty(iter71))
      {
        iter71 = this.txes[iter71];
        iter71.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.mempool !== null && this.mempool !== undefined) {
    output.writeFieldBegin('mempool', Thrift.Type.BOOL, 3);
    output.writeBool(this.mempool);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_addTxList_result = function(args) {
};
blockstore.BlockStoreService_addTxList_result.prototype = {};
blockstore.BlockStoreService_addTxList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_addTxList_result.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_addTxList_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_removeTx_args = function(args) {
  this.network = null;
  this.txid = null;
  if (args) {
    if (args.network !== undefined) {
      this.network = args.network;
    }
    if (args.txid !== undefined) {
      this.txid = args.txid;
    }
  }
};
blockstore.BlockStoreService_removeTx_args.prototype = {};
blockstore.BlockStoreService_removeTx_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.network = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.txid = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_removeTx_args.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_removeTx_args');
  if (this.network !== null && this.network !== undefined) {
    output.writeFieldBegin('network', Thrift.Type.I32, 1);
    output.writeI32(this.network);
    output.writeFieldEnd();
  }
  if (this.txid !== null && this.txid !== undefined) {
    output.writeFieldBegin('txid', Thrift.Type.STRING, 2);
    output.writeBinary(this.txid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_removeTx_result = function(args) {
  this.notfound = null;
  if (args instanceof ttypes.NotFound) {
    this.notfound = args;
    return;
  }
  if (args) {
    if (args.notfound !== undefined) {
      this.notfound = args.notfound;
    }
  }
};
blockstore.BlockStoreService_removeTx_result.prototype = {};
blockstore.BlockStoreService_removeTx_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.notfound = new ttypes.NotFound();
        this.notfound.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_removeTx_result.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_removeTx_result');
  if (this.notfound !== null && this.notfound !== undefined) {
    output.writeFieldBegin('notfound', Thrift.Type.STRUCT, 1);
    this.notfound.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_getTxListSince_args = function(args) {
  this.network = null;
  this.objId = null;
  if (args) {
    if (args.network !== undefined) {
      this.network = args.network;
    }
    if (args.objId !== undefined) {
      this.objId = args.objId;
    }
  }
};
blockstore.BlockStoreService_getTxListSince_args.prototype = {};
blockstore.BlockStoreService_getTxListSince_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.network = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.objId = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_getTxListSince_args.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_getTxListSince_args');
  if (this.network !== null && this.network !== undefined) {
    output.writeFieldBegin('network', Thrift.Type.I32, 1);
    output.writeI32(this.network);
    output.writeFieldEnd();
  }
  if (this.objId !== null && this.objId !== undefined) {
    output.writeFieldBegin('objId', Thrift.Type.STRING, 2);
    output.writeBinary(this.objId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_getTxListSince_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
blockstore.BlockStoreService_getTxListSince_result.prototype = {};
blockstore.BlockStoreService_getTxListSince_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size72 = 0;
        var _rtmp376;
        this.success = [];
        var _etype75 = 0;
        _rtmp376 = input.readListBegin();
        _etype75 = _rtmp376.etype;
        _size72 = _rtmp376.size;
        for (var _i77 = 0; _i77 < _size72; ++_i77)
        {
          var elem78 = null;
          elem78 = new ttypes.Tx();
          elem78.read(input);
          this.success.push(elem78);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_getTxListSince_result.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_getTxListSince_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter79 in this.success)
    {
      if (this.success.hasOwnProperty(iter79))
      {
        iter79 = this.success[iter79];
        iter79.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_getTailTxList_args = function(args) {
  this.network = null;
  this.n = null;
  if (args) {
    if (args.network !== undefined) {
      this.network = args.network;
    }
    if (args.n !== undefined) {
      this.n = args.n;
    }
  }
};
blockstore.BlockStoreService_getTailTxList_args.prototype = {};
blockstore.BlockStoreService_getTailTxList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.network = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.n = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_getTailTxList_args.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_getTailTxList_args');
  if (this.network !== null && this.network !== undefined) {
    output.writeFieldBegin('network', Thrift.Type.I32, 1);
    output.writeI32(this.network);
    output.writeFieldEnd();
  }
  if (this.n !== null && this.n !== undefined) {
    output.writeFieldBegin('n', Thrift.Type.I32, 2);
    output.writeI32(this.n);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_getTailTxList_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
blockstore.BlockStoreService_getTailTxList_result.prototype = {};
blockstore.BlockStoreService_getTailTxList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size80 = 0;
        var _rtmp384;
        this.success = [];
        var _etype83 = 0;
        _rtmp384 = input.readListBegin();
        _etype83 = _rtmp384.etype;
        _size80 = _rtmp384.size;
        for (var _i85 = 0; _i85 < _size80; ++_i85)
        {
          var elem86 = null;
          elem86 = new ttypes.Tx();
          elem86.read(input);
          this.success.push(elem86);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_getTailTxList_result.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_getTailTxList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter87 in this.success)
    {
      if (this.success.hasOwnProperty(iter87))
      {
        iter87 = this.success[iter87];
        iter87.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_getRelatedTxList_args = function(args) {
  this.network = null;
  this.addresses = null;
  if (args) {
    if (args.network !== undefined) {
      this.network = args.network;
    }
    if (args.addresses !== undefined) {
      this.addresses = args.addresses;
    }
  }
};
blockstore.BlockStoreService_getRelatedTxList_args.prototype = {};
blockstore.BlockStoreService_getRelatedTxList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.network = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size88 = 0;
        var _rtmp392;
        this.addresses = [];
        var _etype91 = 0;
        _rtmp392 = input.readListBegin();
        _etype91 = _rtmp392.etype;
        _size88 = _rtmp392.size;
        for (var _i93 = 0; _i93 < _size88; ++_i93)
        {
          var elem94 = null;
          elem94 = input.readString();
          this.addresses.push(elem94);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_getRelatedTxList_args.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_getRelatedTxList_args');
  if (this.network !== null && this.network !== undefined) {
    output.writeFieldBegin('network', Thrift.Type.I32, 1);
    output.writeI32(this.network);
    output.writeFieldEnd();
  }
  if (this.addresses !== null && this.addresses !== undefined) {
    output.writeFieldBegin('addresses', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.addresses.length);
    for (var iter95 in this.addresses)
    {
      if (this.addresses.hasOwnProperty(iter95))
      {
        iter95 = this.addresses[iter95];
        output.writeString(iter95);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_getRelatedTxList_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
blockstore.BlockStoreService_getRelatedTxList_result.prototype = {};
blockstore.BlockStoreService_getRelatedTxList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size96 = 0;
        var _rtmp3100;
        this.success = [];
        var _etype99 = 0;
        _rtmp3100 = input.readListBegin();
        _etype99 = _rtmp3100.etype;
        _size96 = _rtmp3100.size;
        for (var _i101 = 0; _i101 < _size96; ++_i101)
        {
          var elem102 = null;
          elem102 = new ttypes.Tx();
          elem102.read(input);
          this.success.push(elem102);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_getRelatedTxList_result.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_getRelatedTxList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter103 in this.success)
    {
      if (this.success.hasOwnProperty(iter103))
      {
        iter103 = this.success[iter103];
        iter103.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_getRelatedTxIdList_args = function(args) {
  this.network = null;
  this.addresses = null;
  if (args) {
    if (args.network !== undefined) {
      this.network = args.network;
    }
    if (args.addresses !== undefined) {
      this.addresses = args.addresses;
    }
  }
};
blockstore.BlockStoreService_getRelatedTxIdList_args.prototype = {};
blockstore.BlockStoreService_getRelatedTxIdList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.network = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size104 = 0;
        var _rtmp3108;
        this.addresses = [];
        var _etype107 = 0;
        _rtmp3108 = input.readListBegin();
        _etype107 = _rtmp3108.etype;
        _size104 = _rtmp3108.size;
        for (var _i109 = 0; _i109 < _size104; ++_i109)
        {
          var elem110 = null;
          elem110 = input.readString();
          this.addresses.push(elem110);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_getRelatedTxIdList_args.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_getRelatedTxIdList_args');
  if (this.network !== null && this.network !== undefined) {
    output.writeFieldBegin('network', Thrift.Type.I32, 1);
    output.writeI32(this.network);
    output.writeFieldEnd();
  }
  if (this.addresses !== null && this.addresses !== undefined) {
    output.writeFieldBegin('addresses', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.addresses.length);
    for (var iter111 in this.addresses)
    {
      if (this.addresses.hasOwnProperty(iter111))
      {
        iter111 = this.addresses[iter111];
        output.writeString(iter111);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_getRelatedTxIdList_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
blockstore.BlockStoreService_getRelatedTxIdList_result.prototype = {};
blockstore.BlockStoreService_getRelatedTxIdList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size112 = 0;
        var _rtmp3116;
        this.success = [];
        var _etype115 = 0;
        _rtmp3116 = input.readListBegin();
        _etype115 = _rtmp3116.etype;
        _size112 = _rtmp3116.size;
        for (var _i117 = 0; _i117 < _size112; ++_i117)
        {
          var elem118 = null;
          elem118 = input.readBinary();
          this.success.push(elem118);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_getRelatedTxIdList_result.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_getRelatedTxIdList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter119 in this.success)
    {
      if (this.success.hasOwnProperty(iter119))
      {
        iter119 = this.success[iter119];
        output.writeBinary(iter119);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_getSendingTxList_args = function(args) {
  this.network = null;
  if (args) {
    if (args.network !== undefined) {
      this.network = args.network;
    }
  }
};
blockstore.BlockStoreService_getSendingTxList_args.prototype = {};
blockstore.BlockStoreService_getSendingTxList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.network = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_getSendingTxList_args.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_getSendingTxList_args');
  if (this.network !== null && this.network !== undefined) {
    output.writeFieldBegin('network', Thrift.Type.I32, 1);
    output.writeI32(this.network);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_getSendingTxList_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
blockstore.BlockStoreService_getSendingTxList_result.prototype = {};
blockstore.BlockStoreService_getSendingTxList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size120 = 0;
        var _rtmp3124;
        this.success = [];
        var _etype123 = 0;
        _rtmp3124 = input.readListBegin();
        _etype123 = _rtmp3124.etype;
        _size120 = _rtmp3124.size;
        for (var _i125 = 0; _i125 < _size120; ++_i125)
        {
          var elem126 = null;
          elem126 = new ttypes.SendTx();
          elem126.read(input);
          this.success.push(elem126);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_getSendingTxList_result.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_getSendingTxList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter127 in this.success)
    {
      if (this.success.hasOwnProperty(iter127))
      {
        iter127 = this.success[iter127];
        iter127.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_getSendTxList_args = function(args) {
  this.network = null;
  this.txids = null;
  if (args) {
    if (args.network !== undefined) {
      this.network = args.network;
    }
    if (args.txids !== undefined) {
      this.txids = args.txids;
    }
  }
};
blockstore.BlockStoreService_getSendTxList_args.prototype = {};
blockstore.BlockStoreService_getSendTxList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.network = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size128 = 0;
        var _rtmp3132;
        this.txids = [];
        var _etype131 = 0;
        _rtmp3132 = input.readListBegin();
        _etype131 = _rtmp3132.etype;
        _size128 = _rtmp3132.size;
        for (var _i133 = 0; _i133 < _size128; ++_i133)
        {
          var elem134 = null;
          elem134 = input.readBinary();
          this.txids.push(elem134);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_getSendTxList_args.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_getSendTxList_args');
  if (this.network !== null && this.network !== undefined) {
    output.writeFieldBegin('network', Thrift.Type.I32, 1);
    output.writeI32(this.network);
    output.writeFieldEnd();
  }
  if (this.txids !== null && this.txids !== undefined) {
    output.writeFieldBegin('txids', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.txids.length);
    for (var iter135 in this.txids)
    {
      if (this.txids.hasOwnProperty(iter135))
      {
        iter135 = this.txids[iter135];
        output.writeBinary(iter135);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_getSendTxList_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
blockstore.BlockStoreService_getSendTxList_result.prototype = {};
blockstore.BlockStoreService_getSendTxList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size136 = 0;
        var _rtmp3140;
        this.success = [];
        var _etype139 = 0;
        _rtmp3140 = input.readListBegin();
        _etype139 = _rtmp3140.etype;
        _size136 = _rtmp3140.size;
        for (var _i141 = 0; _i141 < _size136; ++_i141)
        {
          var elem142 = null;
          elem142 = new ttypes.SendTx();
          elem142.read(input);
          this.success.push(elem142);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_getSendTxList_result.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_getSendTxList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter143 in this.success)
    {
      if (this.success.hasOwnProperty(iter143))
      {
        iter143 = this.success[iter143];
        iter143.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_sendTx_args = function(args) {
  this.network = null;
  this.sendTx = null;
  if (args) {
    if (args.network !== undefined) {
      this.network = args.network;
    }
    if (args.sendTx !== undefined) {
      this.sendTx = args.sendTx;
    }
  }
};
blockstore.BlockStoreService_sendTx_args.prototype = {};
blockstore.BlockStoreService_sendTx_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.network = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.sendTx = new ttypes.SendTx();
        this.sendTx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_sendTx_args.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_sendTx_args');
  if (this.network !== null && this.network !== undefined) {
    output.writeFieldBegin('network', Thrift.Type.I32, 1);
    output.writeI32(this.network);
    output.writeFieldEnd();
  }
  if (this.sendTx !== null && this.sendTx !== undefined) {
    output.writeFieldBegin('sendTx', Thrift.Type.STRUCT, 2);
    this.sendTx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_sendTx_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.AppException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined) {
      this.e = args.e;
    }
  }
};
blockstore.BlockStoreService_sendTx_result.prototype = {};
blockstore.BlockStoreService_sendTx_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.AppException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_sendTx_result.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_sendTx_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_getUnspent_args = function(args) {
  this.network = null;
  this.addresses = null;
  if (args) {
    if (args.network !== undefined) {
      this.network = args.network;
    }
    if (args.addresses !== undefined) {
      this.addresses = args.addresses;
    }
  }
};
blockstore.BlockStoreService_getUnspent_args.prototype = {};
blockstore.BlockStoreService_getUnspent_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.network = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size144 = 0;
        var _rtmp3148;
        this.addresses = [];
        var _etype147 = 0;
        _rtmp3148 = input.readListBegin();
        _etype147 = _rtmp3148.etype;
        _size144 = _rtmp3148.size;
        for (var _i149 = 0; _i149 < _size144; ++_i149)
        {
          var elem150 = null;
          elem150 = input.readString();
          this.addresses.push(elem150);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_getUnspent_args.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_getUnspent_args');
  if (this.network !== null && this.network !== undefined) {
    output.writeFieldBegin('network', Thrift.Type.I32, 1);
    output.writeI32(this.network);
    output.writeFieldEnd();
  }
  if (this.addresses !== null && this.addresses !== undefined) {
    output.writeFieldBegin('addresses', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.addresses.length);
    for (var iter151 in this.addresses)
    {
      if (this.addresses.hasOwnProperty(iter151))
      {
        iter151 = this.addresses[iter151];
        output.writeString(iter151);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_getUnspent_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
blockstore.BlockStoreService_getUnspent_result.prototype = {};
blockstore.BlockStoreService_getUnspent_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size152 = 0;
        var _rtmp3156;
        this.success = [];
        var _etype155 = 0;
        _rtmp3156 = input.readListBegin();
        _etype155 = _rtmp3156.etype;
        _size152 = _rtmp3156.size;
        for (var _i157 = 0; _i157 < _size152; ++_i157)
        {
          var elem158 = null;
          elem158 = new ttypes.UTXO();
          elem158.read(input);
          this.success.push(elem158);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_getUnspent_result.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_getUnspent_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter159 in this.success)
    {
      if (this.success.hasOwnProperty(iter159))
      {
        iter159 = this.success[iter159];
        iter159.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_getMissingInvList_args = function(args) {
  this.network = null;
  this.invs = null;
  if (args) {
    if (args.network !== undefined) {
      this.network = args.network;
    }
    if (args.invs !== undefined) {
      this.invs = args.invs;
    }
  }
};
blockstore.BlockStoreService_getMissingInvList_args.prototype = {};
blockstore.BlockStoreService_getMissingInvList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.network = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size160 = 0;
        var _rtmp3164;
        this.invs = [];
        var _etype163 = 0;
        _rtmp3164 = input.readListBegin();
        _etype163 = _rtmp3164.etype;
        _size160 = _rtmp3164.size;
        for (var _i165 = 0; _i165 < _size160; ++_i165)
        {
          var elem166 = null;
          elem166 = new ttypes.Inventory();
          elem166.read(input);
          this.invs.push(elem166);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_getMissingInvList_args.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_getMissingInvList_args');
  if (this.network !== null && this.network !== undefined) {
    output.writeFieldBegin('network', Thrift.Type.I32, 1);
    output.writeI32(this.network);
    output.writeFieldEnd();
  }
  if (this.invs !== null && this.invs !== undefined) {
    output.writeFieldBegin('invs', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.invs.length);
    for (var iter167 in this.invs)
    {
      if (this.invs.hasOwnProperty(iter167))
      {
        iter167 = this.invs[iter167];
        iter167.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_getMissingInvList_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
blockstore.BlockStoreService_getMissingInvList_result.prototype = {};
blockstore.BlockStoreService_getMissingInvList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size168 = 0;
        var _rtmp3172;
        this.success = [];
        var _etype171 = 0;
        _rtmp3172 = input.readListBegin();
        _etype171 = _rtmp3172.etype;
        _size168 = _rtmp3172.size;
        for (var _i173 = 0; _i173 < _size168; ++_i173)
        {
          var elem174 = null;
          elem174 = new ttypes.Inventory();
          elem174.read(input);
          this.success.push(elem174);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_getMissingInvList_result.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_getMissingInvList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter175 in this.success)
    {
      if (this.success.hasOwnProperty(iter175))
      {
        iter175 = this.success[iter175];
        iter175.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_getPeers_args = function(args) {
  this.network = null;
  if (args) {
    if (args.network !== undefined) {
      this.network = args.network;
    }
  }
};
blockstore.BlockStoreService_getPeers_args.prototype = {};
blockstore.BlockStoreService_getPeers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.network = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_getPeers_args.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_getPeers_args');
  if (this.network !== null && this.network !== undefined) {
    output.writeFieldBegin('network', Thrift.Type.I32, 1);
    output.writeI32(this.network);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_getPeers_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
blockstore.BlockStoreService_getPeers_result.prototype = {};
blockstore.BlockStoreService_getPeers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size176 = 0;
        var _rtmp3180;
        this.success = [];
        var _etype179 = 0;
        _rtmp3180 = input.readListBegin();
        _etype179 = _rtmp3180.etype;
        _size176 = _rtmp3180.size;
        for (var _i181 = 0; _i181 < _size176; ++_i181)
        {
          var elem182 = null;
          elem182 = input.readString();
          this.success.push(elem182);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_getPeers_result.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_getPeers_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter183 in this.success)
    {
      if (this.success.hasOwnProperty(iter183))
      {
        iter183 = this.success[iter183];
        output.writeString(iter183);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_setPeers_args = function(args) {
  this.network = null;
  this.peers = null;
  if (args) {
    if (args.network !== undefined) {
      this.network = args.network;
    }
    if (args.peers !== undefined) {
      this.peers = args.peers;
    }
  }
};
blockstore.BlockStoreService_setPeers_args.prototype = {};
blockstore.BlockStoreService_setPeers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.network = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size184 = 0;
        var _rtmp3188;
        this.peers = [];
        var _etype187 = 0;
        _rtmp3188 = input.readListBegin();
        _etype187 = _rtmp3188.etype;
        _size184 = _rtmp3188.size;
        for (var _i189 = 0; _i189 < _size184; ++_i189)
        {
          var elem190 = null;
          elem190 = input.readString();
          this.peers.push(elem190);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_setPeers_args.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_setPeers_args');
  if (this.network !== null && this.network !== undefined) {
    output.writeFieldBegin('network', Thrift.Type.I32, 1);
    output.writeI32(this.network);
    output.writeFieldEnd();
  }
  if (this.peers !== null && this.peers !== undefined) {
    output.writeFieldBegin('peers', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.peers.length);
    for (var iter191 in this.peers)
    {
      if (this.peers.hasOwnProperty(iter191))
      {
        iter191 = this.peers[iter191];
        output.writeString(iter191);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreService_setPeers_result = function(args) {
};
blockstore.BlockStoreService_setPeers_result.prototype = {};
blockstore.BlockStoreService_setPeers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

blockstore.BlockStoreService_setPeers_result.prototype.write = function(output) {
  output.writeStructBegin('BlockStoreService_setPeers_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

blockstore.BlockStoreServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
blockstore.BlockStoreServiceClient.prototype = {};
blockstore.BlockStoreServiceClient.prototype.seqid = function() { return this._seqid; }
blockstore.BlockStoreServiceClient.prototype.new_seqid = function() { return this._seqid += 1; }
blockstore.BlockStoreServiceClient.prototype.getBlock = function(network, blockhash, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getBlock(network, blockhash);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getBlock(network, blockhash);
  }
};

blockstore.BlockStoreServiceClient.prototype.send_getBlock = function(network, blockhash) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getBlock', Thrift.MessageType.CALL, this.seqid());
  var args = new blockstore.BlockStoreService_getBlock_args();
  args.network = network;
  args.blockhash = blockhash;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

blockstore.BlockStoreServiceClient.prototype.recv_getBlock = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new blockstore.BlockStoreService_getBlock_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.notfound) {
    return callback(result.notfound);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getBlock failed: unknown result');
};
blockstore.BlockStoreServiceClient.prototype.getTipBlock = function(network, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getTipBlock(network);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getTipBlock(network);
  }
};

blockstore.BlockStoreServiceClient.prototype.send_getTipBlock = function(network) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getTipBlock', Thrift.MessageType.CALL, this.seqid());
  var args = new blockstore.BlockStoreService_getTipBlock_args();
  args.network = network;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

blockstore.BlockStoreServiceClient.prototype.recv_getTipBlock = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new blockstore.BlockStoreService_getTipBlock_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.notfound) {
    return callback(result.notfound);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getTipBlock failed: unknown result');
};
blockstore.BlockStoreServiceClient.prototype.getTailBlockList = function(network, n, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getTailBlockList(network, n);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getTailBlockList(network, n);
  }
};

blockstore.BlockStoreServiceClient.prototype.send_getTailBlockList = function(network, n) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getTailBlockList', Thrift.MessageType.CALL, this.seqid());
  var args = new blockstore.BlockStoreService_getTailBlockList_args();
  args.network = network;
  args.n = n;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

blockstore.BlockStoreServiceClient.prototype.recv_getTailBlockList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new blockstore.BlockStoreService_getTailBlockList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getTailBlockList failed: unknown result');
};
blockstore.BlockStoreServiceClient.prototype.verifyBlock = function(network, block, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_verifyBlock(network, block);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_verifyBlock(network, block);
  }
};

blockstore.BlockStoreServiceClient.prototype.send_verifyBlock = function(network, block) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('verifyBlock', Thrift.MessageType.CALL, this.seqid());
  var args = new blockstore.BlockStoreService_verifyBlock_args();
  args.network = network;
  args.block = block;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

blockstore.BlockStoreServiceClient.prototype.recv_verifyBlock = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new blockstore.BlockStoreService_verifyBlock_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('verifyBlock failed: unknown result');
};
blockstore.BlockStoreServiceClient.prototype.addBlock = function(network, block, txIds, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addBlock(network, block, txIds);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addBlock(network, block, txIds);
  }
};

blockstore.BlockStoreServiceClient.prototype.send_addBlock = function(network, block, txIds) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addBlock', Thrift.MessageType.CALL, this.seqid());
  var args = new blockstore.BlockStoreService_addBlock_args();
  args.network = network;
  args.block = block;
  args.txIds = txIds;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

blockstore.BlockStoreServiceClient.prototype.recv_addBlock = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new blockstore.BlockStoreService_addBlock_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
blockstore.BlockStoreServiceClient.prototype.getTx = function(network, txid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getTx(network, txid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getTx(network, txid);
  }
};

blockstore.BlockStoreServiceClient.prototype.send_getTx = function(network, txid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getTx', Thrift.MessageType.CALL, this.seqid());
  var args = new blockstore.BlockStoreService_getTx_args();
  args.network = network;
  args.txid = txid;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

blockstore.BlockStoreServiceClient.prototype.recv_getTx = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new blockstore.BlockStoreService_getTx_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.notfound) {
    return callback(result.notfound);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getTx failed: unknown result');
};
blockstore.BlockStoreServiceClient.prototype.getTxList = function(network, txids, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getTxList(network, txids);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getTxList(network, txids);
  }
};

blockstore.BlockStoreServiceClient.prototype.send_getTxList = function(network, txids) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getTxList', Thrift.MessageType.CALL, this.seqid());
  var args = new blockstore.BlockStoreService_getTxList_args();
  args.network = network;
  args.txids = txids;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

blockstore.BlockStoreServiceClient.prototype.recv_getTxList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new blockstore.BlockStoreService_getTxList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getTxList failed: unknown result');
};
blockstore.BlockStoreServiceClient.prototype.getMissingTxIdList = function(network, txids, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getMissingTxIdList(network, txids);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getMissingTxIdList(network, txids);
  }
};

blockstore.BlockStoreServiceClient.prototype.send_getMissingTxIdList = function(network, txids) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getMissingTxIdList', Thrift.MessageType.CALL, this.seqid());
  var args = new blockstore.BlockStoreService_getMissingTxIdList_args();
  args.network = network;
  args.txids = txids;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

blockstore.BlockStoreServiceClient.prototype.recv_getMissingTxIdList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new blockstore.BlockStoreService_getMissingTxIdList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getMissingTxIdList failed: unknown result');
};
blockstore.BlockStoreServiceClient.prototype.verifyTx = function(network, tx, mempool, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_verifyTx(network, tx, mempool);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_verifyTx(network, tx, mempool);
  }
};

blockstore.BlockStoreServiceClient.prototype.send_verifyTx = function(network, tx, mempool) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('verifyTx', Thrift.MessageType.CALL, this.seqid());
  var args = new blockstore.BlockStoreService_verifyTx_args();
  args.network = network;
  args.tx = tx;
  args.mempool = mempool;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

blockstore.BlockStoreServiceClient.prototype.recv_verifyTx = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new blockstore.BlockStoreService_verifyTx_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('verifyTx failed: unknown result');
};
blockstore.BlockStoreServiceClient.prototype.addTxList = function(network, txes, mempool, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addTxList(network, txes, mempool);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addTxList(network, txes, mempool);
  }
};

blockstore.BlockStoreServiceClient.prototype.send_addTxList = function(network, txes, mempool) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addTxList', Thrift.MessageType.CALL, this.seqid());
  var args = new blockstore.BlockStoreService_addTxList_args();
  args.network = network;
  args.txes = txes;
  args.mempool = mempool;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

blockstore.BlockStoreServiceClient.prototype.recv_addTxList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new blockstore.BlockStoreService_addTxList_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
blockstore.BlockStoreServiceClient.prototype.removeTx = function(network, txid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_removeTx(network, txid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_removeTx(network, txid);
  }
};

blockstore.BlockStoreServiceClient.prototype.send_removeTx = function(network, txid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('removeTx', Thrift.MessageType.CALL, this.seqid());
  var args = new blockstore.BlockStoreService_removeTx_args();
  args.network = network;
  args.txid = txid;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

blockstore.BlockStoreServiceClient.prototype.recv_removeTx = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new blockstore.BlockStoreService_removeTx_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.notfound) {
    return callback(result.notfound);
  }
  callback(null)
};
blockstore.BlockStoreServiceClient.prototype.getTxListSince = function(network, objId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getTxListSince(network, objId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getTxListSince(network, objId);
  }
};

blockstore.BlockStoreServiceClient.prototype.send_getTxListSince = function(network, objId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getTxListSince', Thrift.MessageType.CALL, this.seqid());
  var args = new blockstore.BlockStoreService_getTxListSince_args();
  args.network = network;
  args.objId = objId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

blockstore.BlockStoreServiceClient.prototype.recv_getTxListSince = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new blockstore.BlockStoreService_getTxListSince_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getTxListSince failed: unknown result');
};
blockstore.BlockStoreServiceClient.prototype.getTailTxList = function(network, n, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getTailTxList(network, n);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getTailTxList(network, n);
  }
};

blockstore.BlockStoreServiceClient.prototype.send_getTailTxList = function(network, n) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getTailTxList', Thrift.MessageType.CALL, this.seqid());
  var args = new blockstore.BlockStoreService_getTailTxList_args();
  args.network = network;
  args.n = n;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

blockstore.BlockStoreServiceClient.prototype.recv_getTailTxList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new blockstore.BlockStoreService_getTailTxList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getTailTxList failed: unknown result');
};
blockstore.BlockStoreServiceClient.prototype.getRelatedTxList = function(network, addresses, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getRelatedTxList(network, addresses);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getRelatedTxList(network, addresses);
  }
};

blockstore.BlockStoreServiceClient.prototype.send_getRelatedTxList = function(network, addresses) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRelatedTxList', Thrift.MessageType.CALL, this.seqid());
  var args = new blockstore.BlockStoreService_getRelatedTxList_args();
  args.network = network;
  args.addresses = addresses;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

blockstore.BlockStoreServiceClient.prototype.recv_getRelatedTxList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new blockstore.BlockStoreService_getRelatedTxList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRelatedTxList failed: unknown result');
};
blockstore.BlockStoreServiceClient.prototype.getRelatedTxIdList = function(network, addresses, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getRelatedTxIdList(network, addresses);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getRelatedTxIdList(network, addresses);
  }
};

blockstore.BlockStoreServiceClient.prototype.send_getRelatedTxIdList = function(network, addresses) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRelatedTxIdList', Thrift.MessageType.CALL, this.seqid());
  var args = new blockstore.BlockStoreService_getRelatedTxIdList_args();
  args.network = network;
  args.addresses = addresses;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

blockstore.BlockStoreServiceClient.prototype.recv_getRelatedTxIdList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new blockstore.BlockStoreService_getRelatedTxIdList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRelatedTxIdList failed: unknown result');
};
blockstore.BlockStoreServiceClient.prototype.getSendingTxList = function(network, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getSendingTxList(network);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getSendingTxList(network);
  }
};

blockstore.BlockStoreServiceClient.prototype.send_getSendingTxList = function(network) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getSendingTxList', Thrift.MessageType.CALL, this.seqid());
  var args = new blockstore.BlockStoreService_getSendingTxList_args();
  args.network = network;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

blockstore.BlockStoreServiceClient.prototype.recv_getSendingTxList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new blockstore.BlockStoreService_getSendingTxList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getSendingTxList failed: unknown result');
};
blockstore.BlockStoreServiceClient.prototype.getSendTxList = function(network, txids, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getSendTxList(network, txids);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getSendTxList(network, txids);
  }
};

blockstore.BlockStoreServiceClient.prototype.send_getSendTxList = function(network, txids) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getSendTxList', Thrift.MessageType.CALL, this.seqid());
  var args = new blockstore.BlockStoreService_getSendTxList_args();
  args.network = network;
  args.txids = txids;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

blockstore.BlockStoreServiceClient.prototype.recv_getSendTxList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new blockstore.BlockStoreService_getSendTxList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getSendTxList failed: unknown result');
};
blockstore.BlockStoreServiceClient.prototype.sendTx = function(network, sendTx, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_sendTx(network, sendTx);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_sendTx(network, sendTx);
  }
};

blockstore.BlockStoreServiceClient.prototype.send_sendTx = function(network, sendTx) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('sendTx', Thrift.MessageType.CALL, this.seqid());
  var args = new blockstore.BlockStoreService_sendTx_args();
  args.network = network;
  args.sendTx = sendTx;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

blockstore.BlockStoreServiceClient.prototype.recv_sendTx = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new blockstore.BlockStoreService_sendTx_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
blockstore.BlockStoreServiceClient.prototype.getUnspent = function(network, addresses, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getUnspent(network, addresses);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getUnspent(network, addresses);
  }
};

blockstore.BlockStoreServiceClient.prototype.send_getUnspent = function(network, addresses) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUnspent', Thrift.MessageType.CALL, this.seqid());
  var args = new blockstore.BlockStoreService_getUnspent_args();
  args.network = network;
  args.addresses = addresses;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

blockstore.BlockStoreServiceClient.prototype.recv_getUnspent = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new blockstore.BlockStoreService_getUnspent_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUnspent failed: unknown result');
};
blockstore.BlockStoreServiceClient.prototype.getMissingInvList = function(network, invs, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getMissingInvList(network, invs);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getMissingInvList(network, invs);
  }
};

blockstore.BlockStoreServiceClient.prototype.send_getMissingInvList = function(network, invs) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getMissingInvList', Thrift.MessageType.CALL, this.seqid());
  var args = new blockstore.BlockStoreService_getMissingInvList_args();
  args.network = network;
  args.invs = invs;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

blockstore.BlockStoreServiceClient.prototype.recv_getMissingInvList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new blockstore.BlockStoreService_getMissingInvList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getMissingInvList failed: unknown result');
};
blockstore.BlockStoreServiceClient.prototype.getPeers = function(network, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getPeers(network);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getPeers(network);
  }
};

blockstore.BlockStoreServiceClient.prototype.send_getPeers = function(network) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPeers', Thrift.MessageType.CALL, this.seqid());
  var args = new blockstore.BlockStoreService_getPeers_args();
  args.network = network;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

blockstore.BlockStoreServiceClient.prototype.recv_getPeers = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new blockstore.BlockStoreService_getPeers_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPeers failed: unknown result');
};
blockstore.BlockStoreServiceClient.prototype.setPeers = function(network, peers, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setPeers(network, peers);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setPeers(network, peers);
  }
};

blockstore.BlockStoreServiceClient.prototype.send_setPeers = function(network, peers) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setPeers', Thrift.MessageType.CALL, this.seqid());
  var args = new blockstore.BlockStoreService_setPeers_args();
  args.network = network;
  args.peers = peers;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

blockstore.BlockStoreServiceClient.prototype.recv_setPeers = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new blockstore.BlockStoreService_setPeers_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
blockstore.BlockStoreServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
blockstore.BlockStoreServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

blockstore.BlockStoreServiceProcessor.prototype.process_getBlock = function(seqid, input, output) {
  var args = new blockstore.BlockStoreService_getBlock_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getBlock.length === 2) {
    Q.fcall(this._handler.getBlock, args.network, args.blockhash)
      .then(function(result) {
        var result = new blockstore.BlockStoreService_getBlock_result({success: result});
        output.writeMessageBegin("getBlock", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new blockstore.BlockStoreService_getBlock_result(err);
        output.writeMessageBegin("getBlock", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getBlock(args.network, args.blockhash,  function (err, result) {
      var result = new blockstore.BlockStoreService_getBlock_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getBlock", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

blockstore.BlockStoreServiceProcessor.prototype.process_getTipBlock = function(seqid, input, output) {
  var args = new blockstore.BlockStoreService_getTipBlock_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getTipBlock.length === 1) {
    Q.fcall(this._handler.getTipBlock, args.network)
      .then(function(result) {
        var result = new blockstore.BlockStoreService_getTipBlock_result({success: result});
        output.writeMessageBegin("getTipBlock", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new blockstore.BlockStoreService_getTipBlock_result(err);
        output.writeMessageBegin("getTipBlock", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getTipBlock(args.network,  function (err, result) {
      var result = new blockstore.BlockStoreService_getTipBlock_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getTipBlock", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

blockstore.BlockStoreServiceProcessor.prototype.process_getTailBlockList = function(seqid, input, output) {
  var args = new blockstore.BlockStoreService_getTailBlockList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getTailBlockList.length === 2) {
    Q.fcall(this._handler.getTailBlockList, args.network, args.n)
      .then(function(result) {
        var result = new blockstore.BlockStoreService_getTailBlockList_result({success: result});
        output.writeMessageBegin("getTailBlockList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new blockstore.BlockStoreService_getTailBlockList_result(err);
        output.writeMessageBegin("getTailBlockList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getTailBlockList(args.network, args.n,  function (err, result) {
      var result = new blockstore.BlockStoreService_getTailBlockList_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getTailBlockList", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

blockstore.BlockStoreServiceProcessor.prototype.process_verifyBlock = function(seqid, input, output) {
  var args = new blockstore.BlockStoreService_verifyBlock_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.verifyBlock.length === 2) {
    Q.fcall(this._handler.verifyBlock, args.network, args.block)
      .then(function(result) {
        var result = new blockstore.BlockStoreService_verifyBlock_result({success: result});
        output.writeMessageBegin("verifyBlock", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new blockstore.BlockStoreService_verifyBlock_result(err);
        output.writeMessageBegin("verifyBlock", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.verifyBlock(args.network, args.block,  function (err, result) {
      var result = new blockstore.BlockStoreService_verifyBlock_result((err != null ? err : {success: result}));
      output.writeMessageBegin("verifyBlock", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

blockstore.BlockStoreServiceProcessor.prototype.process_addBlock = function(seqid, input, output) {
  var args = new blockstore.BlockStoreService_addBlock_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addBlock.length === 3) {
    Q.fcall(this._handler.addBlock, args.network, args.block, args.txIds)
      .then(function(result) {
        var result = new blockstore.BlockStoreService_addBlock_result({success: result});
        output.writeMessageBegin("addBlock", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new blockstore.BlockStoreService_addBlock_result(err);
        output.writeMessageBegin("addBlock", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addBlock(args.network, args.block, args.txIds,  function (err, result) {
      var result = new blockstore.BlockStoreService_addBlock_result((err != null ? err : {success: result}));
      output.writeMessageBegin("addBlock", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

blockstore.BlockStoreServiceProcessor.prototype.process_getTx = function(seqid, input, output) {
  var args = new blockstore.BlockStoreService_getTx_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getTx.length === 2) {
    Q.fcall(this._handler.getTx, args.network, args.txid)
      .then(function(result) {
        var result = new blockstore.BlockStoreService_getTx_result({success: result});
        output.writeMessageBegin("getTx", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new blockstore.BlockStoreService_getTx_result(err);
        output.writeMessageBegin("getTx", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getTx(args.network, args.txid,  function (err, result) {
      var result = new blockstore.BlockStoreService_getTx_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getTx", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

blockstore.BlockStoreServiceProcessor.prototype.process_getTxList = function(seqid, input, output) {
  var args = new blockstore.BlockStoreService_getTxList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getTxList.length === 2) {
    Q.fcall(this._handler.getTxList, args.network, args.txids)
      .then(function(result) {
        var result = new blockstore.BlockStoreService_getTxList_result({success: result});
        output.writeMessageBegin("getTxList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new blockstore.BlockStoreService_getTxList_result(err);
        output.writeMessageBegin("getTxList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getTxList(args.network, args.txids,  function (err, result) {
      var result = new blockstore.BlockStoreService_getTxList_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getTxList", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

blockstore.BlockStoreServiceProcessor.prototype.process_getMissingTxIdList = function(seqid, input, output) {
  var args = new blockstore.BlockStoreService_getMissingTxIdList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getMissingTxIdList.length === 2) {
    Q.fcall(this._handler.getMissingTxIdList, args.network, args.txids)
      .then(function(result) {
        var result = new blockstore.BlockStoreService_getMissingTxIdList_result({success: result});
        output.writeMessageBegin("getMissingTxIdList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new blockstore.BlockStoreService_getMissingTxIdList_result(err);
        output.writeMessageBegin("getMissingTxIdList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getMissingTxIdList(args.network, args.txids,  function (err, result) {
      var result = new blockstore.BlockStoreService_getMissingTxIdList_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getMissingTxIdList", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

blockstore.BlockStoreServiceProcessor.prototype.process_verifyTx = function(seqid, input, output) {
  var args = new blockstore.BlockStoreService_verifyTx_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.verifyTx.length === 3) {
    Q.fcall(this._handler.verifyTx, args.network, args.tx, args.mempool)
      .then(function(result) {
        var result = new blockstore.BlockStoreService_verifyTx_result({success: result});
        output.writeMessageBegin("verifyTx", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new blockstore.BlockStoreService_verifyTx_result(err);
        output.writeMessageBegin("verifyTx", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.verifyTx(args.network, args.tx, args.mempool,  function (err, result) {
      var result = new blockstore.BlockStoreService_verifyTx_result((err != null ? err : {success: result}));
      output.writeMessageBegin("verifyTx", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

blockstore.BlockStoreServiceProcessor.prototype.process_addTxList = function(seqid, input, output) {
  var args = new blockstore.BlockStoreService_addTxList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addTxList.length === 3) {
    Q.fcall(this._handler.addTxList, args.network, args.txes, args.mempool)
      .then(function(result) {
        var result = new blockstore.BlockStoreService_addTxList_result({success: result});
        output.writeMessageBegin("addTxList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new blockstore.BlockStoreService_addTxList_result(err);
        output.writeMessageBegin("addTxList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addTxList(args.network, args.txes, args.mempool,  function (err, result) {
      var result = new blockstore.BlockStoreService_addTxList_result((err != null ? err : {success: result}));
      output.writeMessageBegin("addTxList", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

blockstore.BlockStoreServiceProcessor.prototype.process_removeTx = function(seqid, input, output) {
  var args = new blockstore.BlockStoreService_removeTx_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.removeTx.length === 2) {
    Q.fcall(this._handler.removeTx, args.network, args.txid)
      .then(function(result) {
        var result = new blockstore.BlockStoreService_removeTx_result({success: result});
        output.writeMessageBegin("removeTx", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new blockstore.BlockStoreService_removeTx_result(err);
        output.writeMessageBegin("removeTx", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.removeTx(args.network, args.txid,  function (err, result) {
      var result = new blockstore.BlockStoreService_removeTx_result((err != null ? err : {success: result}));
      output.writeMessageBegin("removeTx", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

blockstore.BlockStoreServiceProcessor.prototype.process_getTxListSince = function(seqid, input, output) {
  var args = new blockstore.BlockStoreService_getTxListSince_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getTxListSince.length === 2) {
    Q.fcall(this._handler.getTxListSince, args.network, args.objId)
      .then(function(result) {
        var result = new blockstore.BlockStoreService_getTxListSince_result({success: result});
        output.writeMessageBegin("getTxListSince", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new blockstore.BlockStoreService_getTxListSince_result(err);
        output.writeMessageBegin("getTxListSince", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getTxListSince(args.network, args.objId,  function (err, result) {
      var result = new blockstore.BlockStoreService_getTxListSince_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getTxListSince", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

blockstore.BlockStoreServiceProcessor.prototype.process_getTailTxList = function(seqid, input, output) {
  var args = new blockstore.BlockStoreService_getTailTxList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getTailTxList.length === 2) {
    Q.fcall(this._handler.getTailTxList, args.network, args.n)
      .then(function(result) {
        var result = new blockstore.BlockStoreService_getTailTxList_result({success: result});
        output.writeMessageBegin("getTailTxList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new blockstore.BlockStoreService_getTailTxList_result(err);
        output.writeMessageBegin("getTailTxList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getTailTxList(args.network, args.n,  function (err, result) {
      var result = new blockstore.BlockStoreService_getTailTxList_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getTailTxList", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

blockstore.BlockStoreServiceProcessor.prototype.process_getRelatedTxList = function(seqid, input, output) {
  var args = new blockstore.BlockStoreService_getRelatedTxList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getRelatedTxList.length === 2) {
    Q.fcall(this._handler.getRelatedTxList, args.network, args.addresses)
      .then(function(result) {
        var result = new blockstore.BlockStoreService_getRelatedTxList_result({success: result});
        output.writeMessageBegin("getRelatedTxList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new blockstore.BlockStoreService_getRelatedTxList_result(err);
        output.writeMessageBegin("getRelatedTxList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getRelatedTxList(args.network, args.addresses,  function (err, result) {
      var result = new blockstore.BlockStoreService_getRelatedTxList_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getRelatedTxList", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

blockstore.BlockStoreServiceProcessor.prototype.process_getRelatedTxIdList = function(seqid, input, output) {
  var args = new blockstore.BlockStoreService_getRelatedTxIdList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getRelatedTxIdList.length === 2) {
    Q.fcall(this._handler.getRelatedTxIdList, args.network, args.addresses)
      .then(function(result) {
        var result = new blockstore.BlockStoreService_getRelatedTxIdList_result({success: result});
        output.writeMessageBegin("getRelatedTxIdList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new blockstore.BlockStoreService_getRelatedTxIdList_result(err);
        output.writeMessageBegin("getRelatedTxIdList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getRelatedTxIdList(args.network, args.addresses,  function (err, result) {
      var result = new blockstore.BlockStoreService_getRelatedTxIdList_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getRelatedTxIdList", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

blockstore.BlockStoreServiceProcessor.prototype.process_getSendingTxList = function(seqid, input, output) {
  var args = new blockstore.BlockStoreService_getSendingTxList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getSendingTxList.length === 1) {
    Q.fcall(this._handler.getSendingTxList, args.network)
      .then(function(result) {
        var result = new blockstore.BlockStoreService_getSendingTxList_result({success: result});
        output.writeMessageBegin("getSendingTxList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new blockstore.BlockStoreService_getSendingTxList_result(err);
        output.writeMessageBegin("getSendingTxList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getSendingTxList(args.network,  function (err, result) {
      var result = new blockstore.BlockStoreService_getSendingTxList_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getSendingTxList", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

blockstore.BlockStoreServiceProcessor.prototype.process_getSendTxList = function(seqid, input, output) {
  var args = new blockstore.BlockStoreService_getSendTxList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getSendTxList.length === 2) {
    Q.fcall(this._handler.getSendTxList, args.network, args.txids)
      .then(function(result) {
        var result = new blockstore.BlockStoreService_getSendTxList_result({success: result});
        output.writeMessageBegin("getSendTxList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new blockstore.BlockStoreService_getSendTxList_result(err);
        output.writeMessageBegin("getSendTxList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getSendTxList(args.network, args.txids,  function (err, result) {
      var result = new blockstore.BlockStoreService_getSendTxList_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getSendTxList", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

blockstore.BlockStoreServiceProcessor.prototype.process_sendTx = function(seqid, input, output) {
  var args = new blockstore.BlockStoreService_sendTx_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.sendTx.length === 2) {
    Q.fcall(this._handler.sendTx, args.network, args.sendTx)
      .then(function(result) {
        var result = new blockstore.BlockStoreService_sendTx_result({success: result});
        output.writeMessageBegin("sendTx", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new blockstore.BlockStoreService_sendTx_result(err);
        output.writeMessageBegin("sendTx", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.sendTx(args.network, args.sendTx,  function (err, result) {
      var result = new blockstore.BlockStoreService_sendTx_result((err != null ? err : {success: result}));
      output.writeMessageBegin("sendTx", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

blockstore.BlockStoreServiceProcessor.prototype.process_getUnspent = function(seqid, input, output) {
  var args = new blockstore.BlockStoreService_getUnspent_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getUnspent.length === 2) {
    Q.fcall(this._handler.getUnspent, args.network, args.addresses)
      .then(function(result) {
        var result = new blockstore.BlockStoreService_getUnspent_result({success: result});
        output.writeMessageBegin("getUnspent", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new blockstore.BlockStoreService_getUnspent_result(err);
        output.writeMessageBegin("getUnspent", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getUnspent(args.network, args.addresses,  function (err, result) {
      var result = new blockstore.BlockStoreService_getUnspent_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getUnspent", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

blockstore.BlockStoreServiceProcessor.prototype.process_getMissingInvList = function(seqid, input, output) {
  var args = new blockstore.BlockStoreService_getMissingInvList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getMissingInvList.length === 2) {
    Q.fcall(this._handler.getMissingInvList, args.network, args.invs)
      .then(function(result) {
        var result = new blockstore.BlockStoreService_getMissingInvList_result({success: result});
        output.writeMessageBegin("getMissingInvList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new blockstore.BlockStoreService_getMissingInvList_result(err);
        output.writeMessageBegin("getMissingInvList", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getMissingInvList(args.network, args.invs,  function (err, result) {
      var result = new blockstore.BlockStoreService_getMissingInvList_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getMissingInvList", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

blockstore.BlockStoreServiceProcessor.prototype.process_getPeers = function(seqid, input, output) {
  var args = new blockstore.BlockStoreService_getPeers_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getPeers.length === 1) {
    Q.fcall(this._handler.getPeers, args.network)
      .then(function(result) {
        var result = new blockstore.BlockStoreService_getPeers_result({success: result});
        output.writeMessageBegin("getPeers", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new blockstore.BlockStoreService_getPeers_result(err);
        output.writeMessageBegin("getPeers", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getPeers(args.network,  function (err, result) {
      var result = new blockstore.BlockStoreService_getPeers_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getPeers", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

blockstore.BlockStoreServiceProcessor.prototype.process_setPeers = function(seqid, input, output) {
  var args = new blockstore.BlockStoreService_setPeers_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setPeers.length === 2) {
    Q.fcall(this._handler.setPeers, args.network, args.peers)
      .then(function(result) {
        var result = new blockstore.BlockStoreService_setPeers_result({success: result});
        output.writeMessageBegin("setPeers", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new blockstore.BlockStoreService_setPeers_result(err);
        output.writeMessageBegin("setPeers", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.setPeers(args.network, args.peers,  function (err, result) {
      var result = new blockstore.BlockStoreService_setPeers_result((err != null ? err : {success: result}));
      output.writeMessageBegin("setPeers", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

